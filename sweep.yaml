openapi: 3.0.0
servers:
  - description: Sweep API
    url: 'https://api.sweephq.com/1.0.0'
info:
  description: API definitions for the Sweep server/dashboard.
  version: "1.0.0-oas3"
  title: Sweep API
  termsOfService: 'http://sweephq.com/terms'
  contact:
    email: contact@avinium.com
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
tags:
  - name: user
    description: A User
  - name: listener
    description: >-
      A Listener must be configured for a Message to be sent in response to any
      Event. If an Event is raised without an appropriate Listener, no error
      will be raised on the client-side.
  - name: event
    description: >-
      Clients choose when and where to raise Events, which are sent to a Sweep
      endpoint with the appropriate Event parameters (this may directly push to
      a Message Queue like Azure Service Bus). If a Listener is configured for
      the Event, the Listener will send a Message and create a LoggedEvent that can be retrieved by the user.
  - name: template
    description: >-
      When an Event is raised, the Listener will populate the Template with the
      Event arguments and convert to a Message.
  - name: message
    description: >-
      A Message is a populated Template that will be dispatched to a mailing
      server. A Message is not guaranteed to be sent.
paths:
  /events:
    get:
      tags:
        - event
      summary: List all received events
      description: Returns a list of all events
      operationId: listEvents
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoggedEvent'
      security:
        - Google: []
    post:
      tags:
        - event
      summary: Raise an event
      operationId: addEvent
      responses:
        '200':
          description: An event has been successfully created.
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Event'
      security:
        - api_key: []
  /listeners:
    get:
      tags:
        - listener
      summary: List all Listeners
      description: Returns a list of Listeners
      operationId: listListeners
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listener'
      security:
        - Google: []
    post:
      tags:
        - listener
      summary: Create a new Listener
      operationId: addListener
      responses:
        '405':
          description: Invalid input
      security:
        - Google: []
      requestBody:
        $ref: '#/components/requestBodies/Listener'
    put:
      tags:
        - listener
      summary: Update an existing Listener
      operationId: updateListener
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Listener not found
        '405':
          description: Validation exception
      security:
        - Google: []
      requestBody:
        $ref: '#/components/requestBodies/Listener'
  '/listeners/{listenerId}':
    get:
      tags:
        - listener
      summary: Find Listener by ID
      description: Returns a single listener
      operationId: getListenerById
      parameters:
        - name: listenerId  
          in: path
          description: ID of listener to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listener'
        '400':
          description: Invalid ID supplied
        '404':
          description: Listener not found
    delete:
      tags:
        - listener
      summary: Deletes a Listener
      operationId: deleteListener
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: listenerId
          in: path
          description: Listener id to delete
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Listener not found
      security:
        - Google: []
  /messages:
    get:
        tags:
          - message
        summary: List all messages
        description: Returns a list of messages
        operationId: listMessages
        responses:
          '200':
            description: successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Message'
        security:
          - Google: []
  '/messages/{messageId}':
    get:
      tags:
        - message
      summary: Find message by ID
      description: Returns a single message
      operationId: getmessageById
      parameters:
        - name: messageId
          in: path
          description: ID of message to return
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid ID supplied
        '404':
          description: message not found
      security:
        - Google: []
  '/events/{eventId}':
    get:
      tags:
        - event
      summary: Find raised event by ID
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event that needs to be fetched
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedEvent'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /templates:
    get:
      tags:
        - template
      summary: List all Templates
      description: Returns a list of templates
      operationId: listTemplate
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
      security:
        - Google: []
    post:
      tags:
        - template
      summary: Create a new Template
      operationId: addTemplate
      responses:
        '405':
          description: Invalid input
      security:
        - Google: []
      requestBody:
        $ref: '#/components/requestBodies/Template'
    put:
      tags:
        - template
      summary: Update an existing Template
      operationId: updateTemplate
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Template not found
        '405':
          description: Validation exception
      security:
        - Google: []
      requestBody:
        $ref: '#/components/requestBodies/Template'
  '/templates/{templateId}':
    get:
      tags:
        - template
      summary: Find Template by ID
      description: Returns a single template
      operationId: getTemplateById
      parameters:
        - name: templateId
          in: path
          description: ID of template to return
          required: true
          schema:
            type: string
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '400':
          description: Invalid ID supplied
        '404':
          description: Listener not found
    delete:
      tags:
        - template
      summary: Deletes a Template
      operationId: deleteTemplate
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: templateId
          in: path
          description: Template id to delete
          required: true
          schema:
            type: string
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Template not found
      security:
        - Google: []
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        default:
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  '/user/{userId}':
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: userId
          in: path
          description: The user id.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of the user ame that need to be updated
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: The ID of the user to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Listener:
      type: object
      required:
        - id
        - eventName
        - userId
        - organizationId
      properties:
        id:
          type: string
        eventName:
          type: string
        userId:
          type: string
        organizationId:
          type: string
    LoggedEvent:
      type: object
      required:
        - id
        - eventName
        - organizationId
      properties:
        id:
          type: string
        eventName:
          type: string
          format: string
        params:
          type: object
        organizationId:
          type: string
    Event:
      type: object
      properties:
        eventName: 
          type: string
        params:
          type: array
          items:
            type: object
        organizationId:
          type: string
    Organization:
      type: object
      required:
        - id
      properties:
        id:
          type: string
    User:
      type: object
      required:
        - id
        - us
      properties:
        id:
          type: string
        username:
          type: string
        password:
          type: string
        apiKey:
          type: string
        organizationId:
          type: string
    Message:
      type: object
      required:
        - id
        - content
        - to
        - userId
        - organizationId
      properties:
        id:
          type: string
        content:
          type: string
          example: <html><body>Hi!</body></html>
        to:
          type: array
          items:
            type: string
        userId:
          type: string
        organizationId:
          type: string
    Template:
      type: object
      properties:
        id:
          type: string
        template:
          type: string
        to:
          type: array
          items: 
            type: string
        userId:
          type: string
        organizationId:
          type: string
  requestBodies:
    Listener:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Listener'
      description: A Listener object to be added
      required: true
    Event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
      description: Raises an Event with associated parameters
      required: true
    Template:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Template'
      description: A Template object with associated parameters
      required: true
  securitySchemes:
    Google:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: 'https://accounts.google.com/o/oauth2/v2/auth'
          tokenUrl: 'https://www.googleapis.com/oauth2/v4/token'
          scopes:
            'https://www.googleapis.com/auth/userinfo.email': access your e-mail address
    GitHub:
      type: oauth2
      flows:
        authorizationCode:
            authorizationUrl: 'https://github.com/login/oauth/authorize2'
            tokenUrl: 'https://github.com/login/oauth/access_token'
            scopes:
              'user:email': access your e-mail address
    api_key:
      type: apiKey
      name: api_key
      in: header