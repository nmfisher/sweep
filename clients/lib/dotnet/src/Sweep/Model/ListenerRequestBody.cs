/* 
 * Sweep API
 *
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sweep.Client.OpenAPIDateConverter;

namespace Sweep.Model
{
    /// <summary>
    /// ListenerRequestBody
    /// </summary>
    [DataContract]
    public partial class ListenerRequestBody :  IEquatable<ListenerRequestBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListenerRequestBody" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListenerRequestBody() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListenerRequestBody" /> class.
        /// </summary>
        /// <param name="eventName">eventName (required).</param>
        /// <param name="triggerEvent">triggerEvent.</param>
        /// <param name="triggerNumber">triggerNumber.</param>
        /// <param name="triggerPeriod">triggerPeriod.</param>
        /// <param name="triggerMatch">triggerMatch.</param>
        /// <param name="eventParams">eventParams.</param>
        public ListenerRequestBody(string eventName = default(string), string triggerEvent = default(string), decimal triggerNumber = default(decimal), string triggerPeriod = default(string), string triggerMatch = default(string), List<string> eventParams = default(List<string>))
        {
            // to ensure "eventName" is required (not null)
            if (eventName == null)
            {
                throw new InvalidDataException("eventName is a required property for ListenerRequestBody and cannot be null");
            }
            else
            {
                this.EventName = eventName;
            }

            this.TriggerEvent = triggerEvent;
            this.TriggerNumber = triggerNumber;
            this.TriggerPeriod = triggerPeriod;
            this.TriggerMatch = triggerMatch;
            this.EventParams = eventParams;
        }
        
        /// <summary>
        /// Gets or Sets EventName
        /// </summary>
        [DataMember(Name="eventName", EmitDefaultValue=false)]
        public string EventName { get; set; }

        /// <summary>
        /// Gets or Sets TriggerEvent
        /// </summary>
        [DataMember(Name="triggerEvent", EmitDefaultValue=false)]
        public string TriggerEvent { get; set; }

        /// <summary>
        /// Gets or Sets TriggerNumber
        /// </summary>
        [DataMember(Name="triggerNumber", EmitDefaultValue=false)]
        public decimal TriggerNumber { get; set; }

        /// <summary>
        /// Gets or Sets TriggerPeriod
        /// </summary>
        [DataMember(Name="triggerPeriod", EmitDefaultValue=false)]
        public string TriggerPeriod { get; set; }

        /// <summary>
        /// Gets or Sets TriggerMatch
        /// </summary>
        [DataMember(Name="triggerMatch", EmitDefaultValue=false)]
        public string TriggerMatch { get; set; }

        /// <summary>
        /// Gets or Sets EventParams
        /// </summary>
        [DataMember(Name="eventParams", EmitDefaultValue=false)]
        public List<string> EventParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListenerRequestBody {\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  TriggerEvent: ").Append(TriggerEvent).Append("\n");
            sb.Append("  TriggerNumber: ").Append(TriggerNumber).Append("\n");
            sb.Append("  TriggerPeriod: ").Append(TriggerPeriod).Append("\n");
            sb.Append("  TriggerMatch: ").Append(TriggerMatch).Append("\n");
            sb.Append("  EventParams: ").Append(EventParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ListenerRequestBody);
        }

        /// <summary>
        /// Returns true if ListenerRequestBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ListenerRequestBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListenerRequestBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.TriggerEvent == input.TriggerEvent ||
                    (this.TriggerEvent != null &&
                    this.TriggerEvent.Equals(input.TriggerEvent))
                ) && 
                (
                    this.TriggerNumber == input.TriggerNumber ||
                    (this.TriggerNumber != null &&
                    this.TriggerNumber.Equals(input.TriggerNumber))
                ) && 
                (
                    this.TriggerPeriod == input.TriggerPeriod ||
                    (this.TriggerPeriod != null &&
                    this.TriggerPeriod.Equals(input.TriggerPeriod))
                ) && 
                (
                    this.TriggerMatch == input.TriggerMatch ||
                    (this.TriggerMatch != null &&
                    this.TriggerMatch.Equals(input.TriggerMatch))
                ) && 
                (
                    this.EventParams == input.EventParams ||
                    this.EventParams != null &&
                    this.EventParams.SequenceEqual(input.EventParams)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.TriggerEvent != null)
                    hashCode = hashCode * 59 + this.TriggerEvent.GetHashCode();
                if (this.TriggerNumber != null)
                    hashCode = hashCode * 59 + this.TriggerNumber.GetHashCode();
                if (this.TriggerPeriod != null)
                    hashCode = hashCode * 59 + this.TriggerPeriod.GetHashCode();
                if (this.TriggerMatch != null)
                    hashCode = hashCode * 59 + this.TriggerMatch.GetHashCode();
                if (this.EventParams != null)
                    hashCode = hashCode * 59 + this.EventParams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
