/* 
 * Sweep API
 *
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sweep.Client;
using Sweep.Model;

namespace Sweep.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get organization info for the currently authenticated context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Organization</returns>
        Organization GetOrganizationInfo ();

        /// <summary>
        /// Get organization info for the currently authenticated context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Organization</returns>
        ApiResponse<Organization> GetOrganizationInfoWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get organization info for the currently authenticated context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Organization</returns>
        System.Threading.Tasks.Task<Organization> GetOrganizationInfoAsync ();

        /// <summary>
        /// Get organization info for the currently authenticated context
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Organization)</returns>
        System.Threading.Tasks.Task<ApiResponse<Organization>> GetOrganizationInfoAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOrganizationApi : IOrganizationApiSync, IOrganizationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OrganizationApi : IOrganizationApi
    {
        private Sweep.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OrganizationApi(String basePath)
        {
            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                new Sweep.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OrganizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OrganizationApi(Sweep.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OrganizationApi(Sweep.Client.ISynchronousClient client,Sweep.Client.IAsynchronousClient asyncClient, Sweep.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sweep.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sweep.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sweep.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sweep.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get organization info for the currently authenticated context 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Organization</returns>
        public Organization GetOrganizationInfo ()
        {
             Sweep.Client.ApiResponse<Organization> localVarResponse = GetOrganizationInfoWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get organization info for the currently authenticated context 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Organization</returns>
        public Sweep.Client.ApiResponse< Organization > GetOrganizationInfoWithHttpInfo ()
        {
            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Get< Organization >("/organization", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOrganizationInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get organization info for the currently authenticated context 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Organization</returns>
        public async System.Threading.Tasks.Task<Organization> GetOrganizationInfoAsync ()
        {
             Sweep.Client.ApiResponse<Organization> localVarResponse = await GetOrganizationInfoAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get organization info for the currently authenticated context 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Organization)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Organization>> GetOrganizationInfoAsyncWithHttpInfo ()
        {

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json",
                "application/xml"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Organization>("/organization", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetOrganizationInfo", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
