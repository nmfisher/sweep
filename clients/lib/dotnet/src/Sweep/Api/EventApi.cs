/* 
 * Sweep API
 *
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sweep.Client;
using Sweep.Model;

namespace Sweep.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Raise an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns></returns>
        void AddEvent (EventRequestBody eventRequestBody, string apiKey = null);

        /// <summary>
        /// Raise an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddEventWithHttpInfo (EventRequestBody eventRequestBody, string apiKey = null);
        /// <summary>
        /// Find raised event by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>Event</returns>
        Event GetEventById (string eventId);

        /// <summary>
        /// Find raised event by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>ApiResponse of Event</returns>
        ApiResponse<Event> GetEventByIdWithHttpInfo (string eventId);
        /// <summary>
        /// List all received events
        /// </summary>
        /// <remarks>
        /// Returns a list of all events
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        List<Event> ListEvents (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// List all received events
        /// </summary>
        /// <remarks>
        /// Returns a list of all events
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        ApiResponse<List<Event>> ListEventsWithHttpInfo (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Raise an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddEventAsync (EventRequestBody eventRequestBody, string apiKey = null);

        /// <summary>
        /// Raise an event
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddEventAsyncWithHttpInfo (EventRequestBody eventRequestBody, string apiKey = null);
        /// <summary>
        /// Find raised event by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>Task of Event</returns>
        System.Threading.Tasks.Task<Event> GetEventByIdAsync (string eventId);

        /// <summary>
        /// Find raised event by ID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        System.Threading.Tasks.Task<ApiResponse<Event>> GetEventByIdAsyncWithHttpInfo (string eventId);
        /// <summary>
        /// List all received events
        /// </summary>
        /// <remarks>
        /// Returns a list of all events
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        System.Threading.Tasks.Task<List<Event>> ListEventsAsync (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null);

        /// <summary>
        /// List all received events
        /// </summary>
        /// <remarks>
        /// Returns a list of all events
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Event>>> ListEventsAsyncWithHttpInfo (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEventApi : IEventApiSync, IEventApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EventApi : IEventApi
    {
        private Sweep.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EventApi(String basePath)
        {
            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                new Sweep.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EventApi(Sweep.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EventApi(Sweep.Client.ISynchronousClient client,Sweep.Client.IAsynchronousClient asyncClient, Sweep.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sweep.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sweep.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sweep.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sweep.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Raise an event 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns></returns>
        public void AddEvent (EventRequestBody eventRequestBody, string apiKey = null)
        {
             AddEventWithHttpInfo(eventRequestBody, apiKey);
        }

        /// <summary>
        /// Raise an event 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sweep.Client.ApiResponse<Object> AddEventWithHttpInfo (EventRequestBody eventRequestBody, string apiKey = null)
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventApi->AddEvent");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (apiKey != null)
                requestOptions.HeaderParameters.Add("api_key", Sweep.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            requestOptions.Data = eventRequestBody;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                requestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddEvent", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Raise an event 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddEventAsync (EventRequestBody eventRequestBody, string apiKey = null)
        {
             await AddEventAsyncWithHttpInfo(eventRequestBody, apiKey);

        }

        /// <summary>
        /// Raise an event 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequestBody"></param>
        /// <param name="apiKey"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Object>> AddEventAsyncWithHttpInfo (EventRequestBody eventRequestBody, string apiKey = null)
        {
            // verify the required parameter 'eventRequestBody' is set
            if (eventRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'eventRequestBody' when calling EventApi->AddEvent");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("api_key", Sweep.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            requestOptions.Data = eventRequestBody;

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api_key")))
            {
                requestOptions.HeaderParameters.Add("api_key", this.Configuration.GetApiKeyWithPrefix("api_key"));
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddEvent", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find raised event by ID 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>Event</returns>
        public Event GetEventById (string eventId)
        {
             Sweep.Client.ApiResponse<Event> localVarResponse = GetEventByIdWithHttpInfo(eventId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find raised event by ID 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>ApiResponse of Event</returns>
        public Sweep.Client.ApiResponse< Event > GetEventByIdWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventApi->GetEventById");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (eventId != null)
                requestOptions.PathParameters.Add("eventId", Sweep.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Event >("/events/{eventId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEventById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find raised event by ID 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>Task of Event</returns>
        public async System.Threading.Tasks.Task<Event> GetEventByIdAsync (string eventId)
        {
             Sweep.Client.ApiResponse<Event> localVarResponse = await GetEventByIdAsyncWithHttpInfo(eventId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find raised event by ID 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventId">ID of event that needs to be fetched</param>
        /// <returns>Task of ApiResponse (Event)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Event>> GetEventByIdAsyncWithHttpInfo (string eventId)
        {
            // verify the required parameter 'eventId' is set
            if (eventId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'eventId' when calling EventApi->GetEventById");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (eventId != null)
                requestOptions.PathParameters.Add("eventId", Sweep.Client.ClientUtils.ParameterToString(eventId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Event>("/events/{eventId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetEventById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all received events Returns a list of all events
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>List&lt;Event&gt;</returns>
        public List<Event> ListEvents (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             Sweep.Client.ApiResponse<List<Event>> localVarResponse = ListEventsWithHttpInfo(withActions, startDate, endDate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all received events Returns a list of all events
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>ApiResponse of List&lt;Event&gt;</returns>
        public Sweep.Client.ApiResponse< List<Event> > ListEventsWithHttpInfo (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null)
        {
            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withActions != null)
            {
                foreach (var kvp in Sweep.Client.ClientUtils.ParameterToMultiMap("", "withActions", withActions))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (startDate != null)
            {
                foreach (var kvp in Sweep.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (endDate != null)
            {
                foreach (var kvp in Sweep.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Get< List<Event> >("/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListEvents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all received events Returns a list of all events
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of List&lt;Event&gt;</returns>
        public async System.Threading.Tasks.Task<List<Event>> ListEventsAsync (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null)
        {
             Sweep.Client.ApiResponse<List<Event>> localVarResponse = await ListEventsAsyncWithHttpInfo(withActions, startDate, endDate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all received events Returns a list of all events
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withActions"> (optional)</param>
        /// <param name="startDate"> (optional)</param>
        /// <param name="endDate"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Event&gt;)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<List<Event>>> ListEventsAsyncWithHttpInfo (bool? withActions = null, DateTime? startDate = null, DateTime? endDate = null)
        {

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (withActions != null)
            {
                foreach (var kvp in Sweep.Client.ClientUtils.ParameterToMultiMap("", "withActions", withActions))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (startDate != null)
            {
                foreach (var kvp in Sweep.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (endDate != null)
            {
                foreach (var kvp in Sweep.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Event>>("/events", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListEvents", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
