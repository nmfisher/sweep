/* 
 * Sweep API
 *
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sweep.Client;
using Sweep.Model;

namespace Sweep.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListenerApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Listener</returns>
        Listener AddListener (ListenerRequestBody listenerRequestBody);

        /// <summary>
        /// Create a new Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>ApiResponse of Listener</returns>
        ApiResponse<Listener> AddListenerWithHttpInfo (ListenerRequestBody listenerRequestBody);
        /// <summary>
        /// Associates a Template to a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns></returns>
        void AddListenerTemplate (string listenerId, string templateId);

        /// <summary>
        /// Associates a Template to a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddListenerTemplateWithHttpInfo (string listenerId, string templateId);
        /// <summary>
        /// Deletes a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns></returns>
        void DeleteListener (string listenerId);

        /// <summary>
        /// Deletes a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListenerWithHttpInfo (string listenerId);
        /// <summary>
        /// Disassociates a Template from a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns></returns>
        void DeleteListenerTemplate (string listenerId, string templateId);

        /// <summary>
        /// Disassociates a Template from a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteListenerTemplateWithHttpInfo (string listenerId, string templateId);
        /// <summary>
        /// Get a listener by ID
        /// </summary>
        /// <remarks>
        /// Returns a listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>Listener</returns>
        Listener GetListener (string listenerId);

        /// <summary>
        /// Get a listener by ID
        /// </summary>
        /// <remarks>
        /// Returns a listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>ApiResponse of Listener</returns>
        ApiResponse<Listener> GetListenerWithHttpInfo (string listenerId);
        /// <summary>
        /// List Templates for Listener
        /// </summary>
        /// <remarks>
        /// Returns a list of templates associated with this listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>List&lt;ListenerTemplate&gt;</returns>
        List<ListenerTemplate> ListListenerTemplates (string listenerId);

        /// <summary>
        /// List Templates for Listener
        /// </summary>
        /// <remarks>
        /// Returns a list of templates associated with this listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>ApiResponse of List&lt;ListenerTemplate&gt;</returns>
        ApiResponse<List<ListenerTemplate>> ListListenerTemplatesWithHttpInfo (string listenerId);
        /// <summary>
        /// List all Listeners
        /// </summary>
        /// <remarks>
        /// Returns a list of Listeners
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Listener&gt;</returns>
        List<Listener> ListListeners ();

        /// <summary>
        /// List all Listeners
        /// </summary>
        /// <remarks>
        /// Returns a list of Listeners
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Listener&gt;</returns>
        ApiResponse<List<Listener>> ListListenersWithHttpInfo ();
        /// <summary>
        /// List all messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages for the given ListenerAction
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>List&lt;Message&gt;</returns>
        List<Message> ListMessagesForAction (string listenerActionId);

        /// <summary>
        /// List all messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages for the given ListenerAction
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>ApiResponse of List&lt;Message&gt;</returns>
        ApiResponse<List<Message>> ListMessagesForActionWithHttpInfo (string listenerActionId);
        /// <summary>
        /// Updates a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Listener</returns>
        Listener UpdateListener (string listenerId, ListenerRequestBody listenerRequestBody);

        /// <summary>
        /// Updates a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>ApiResponse of Listener</returns>
        ApiResponse<Listener> UpdateListenerWithHttpInfo (string listenerId, ListenerRequestBody listenerRequestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListenerApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of Listener</returns>
        System.Threading.Tasks.Task<Listener> AddListenerAsync (ListenerRequestBody listenerRequestBody);

        /// <summary>
        /// Create a new Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of ApiResponse (Listener)</returns>
        System.Threading.Tasks.Task<ApiResponse<Listener>> AddListenerAsyncWithHttpInfo (ListenerRequestBody listenerRequestBody);
        /// <summary>
        /// Associates a Template to a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddListenerTemplateAsync (string listenerId, string templateId);

        /// <summary>
        /// Associates a Template to a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddListenerTemplateAsyncWithHttpInfo (string listenerId, string templateId);
        /// <summary>
        /// Deletes a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListenerAsync (string listenerId);

        /// <summary>
        /// Deletes a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListenerAsyncWithHttpInfo (string listenerId);
        /// <summary>
        /// Disassociates a Template from a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteListenerTemplateAsync (string listenerId, string templateId);

        /// <summary>
        /// Disassociates a Template from a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteListenerTemplateAsyncWithHttpInfo (string listenerId, string templateId);
        /// <summary>
        /// Get a listener by ID
        /// </summary>
        /// <remarks>
        /// Returns a listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>Task of Listener</returns>
        System.Threading.Tasks.Task<Listener> GetListenerAsync (string listenerId);

        /// <summary>
        /// Get a listener by ID
        /// </summary>
        /// <remarks>
        /// Returns a listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>Task of ApiResponse (Listener)</returns>
        System.Threading.Tasks.Task<ApiResponse<Listener>> GetListenerAsyncWithHttpInfo (string listenerId);
        /// <summary>
        /// List Templates for Listener
        /// </summary>
        /// <remarks>
        /// Returns a list of templates associated with this listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>Task of List&lt;ListenerTemplate&gt;</returns>
        System.Threading.Tasks.Task<List<ListenerTemplate>> ListListenerTemplatesAsync (string listenerId);

        /// <summary>
        /// List Templates for Listener
        /// </summary>
        /// <remarks>
        /// Returns a list of templates associated with this listener
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>Task of ApiResponse (List&lt;ListenerTemplate&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ListenerTemplate>>> ListListenerTemplatesAsyncWithHttpInfo (string listenerId);
        /// <summary>
        /// List all Listeners
        /// </summary>
        /// <remarks>
        /// Returns a list of Listeners
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Listener&gt;</returns>
        System.Threading.Tasks.Task<List<Listener>> ListListenersAsync ();

        /// <summary>
        /// List all Listeners
        /// </summary>
        /// <remarks>
        /// Returns a list of Listeners
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Listener&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Listener>>> ListListenersAsyncWithHttpInfo ();
        /// <summary>
        /// List all messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages for the given ListenerAction
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>Task of List&lt;Message&gt;</returns>
        System.Threading.Tasks.Task<List<Message>> ListMessagesForActionAsync (string listenerActionId);

        /// <summary>
        /// List all messages
        /// </summary>
        /// <remarks>
        /// Returns a list of messages for the given ListenerAction
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>Task of ApiResponse (List&lt;Message&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Message>>> ListMessagesForActionAsyncWithHttpInfo (string listenerActionId);
        /// <summary>
        /// Updates a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of Listener</returns>
        System.Threading.Tasks.Task<Listener> UpdateListenerAsync (string listenerId, ListenerRequestBody listenerRequestBody);

        /// <summary>
        /// Updates a Listener
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of ApiResponse (Listener)</returns>
        System.Threading.Tasks.Task<ApiResponse<Listener>> UpdateListenerAsyncWithHttpInfo (string listenerId, ListenerRequestBody listenerRequestBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IListenerApi : IListenerApiSync, IListenerApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ListenerApi : IListenerApi
    {
        private Sweep.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ListenerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListenerApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListenerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ListenerApi(String basePath)
        {
            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                new Sweep.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ListenerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ListenerApi(Sweep.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ListenerApi(Sweep.Client.ISynchronousClient client,Sweep.Client.IAsynchronousClient asyncClient, Sweep.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sweep.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sweep.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sweep.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sweep.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Listener</returns>
        public Listener AddListener (ListenerRequestBody listenerRequestBody)
        {
             Sweep.Client.ApiResponse<Listener> localVarResponse = AddListenerWithHttpInfo(listenerRequestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>ApiResponse of Listener</returns>
        public Sweep.Client.ApiResponse< Listener > AddListenerWithHttpInfo (ListenerRequestBody listenerRequestBody)
        {
            // verify the required parameter 'listenerRequestBody' is set
            if (listenerRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerRequestBody' when calling ListenerApi->AddListener");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = listenerRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Post< Listener >("/listeners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a new Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of Listener</returns>
        public async System.Threading.Tasks.Task<Listener> AddListenerAsync (ListenerRequestBody listenerRequestBody)
        {
             Sweep.Client.ApiResponse<Listener> localVarResponse = await AddListenerAsyncWithHttpInfo(listenerRequestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of ApiResponse (Listener)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Listener>> AddListenerAsyncWithHttpInfo (ListenerRequestBody listenerRequestBody)
        {
            // verify the required parameter 'listenerRequestBody' is set
            if (listenerRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerRequestBody' when calling ListenerApi->AddListener");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = listenerRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Listener>("/listeners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Associates a Template to a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns></returns>
        public void AddListenerTemplate (string listenerId, string templateId)
        {
             AddListenerTemplateWithHttpInfo(listenerId, templateId);
        }

        /// <summary>
        /// Associates a Template to a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sweep.Client.ApiResponse<Object> AddListenerTemplateWithHttpInfo (string listenerId, string templateId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->AddListenerTemplate");

            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling ListenerApi->AddListenerTemplate");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Post<Object>("/listeners/{listenerId}/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddListenerTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Associates a Template to a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddListenerTemplateAsync (string listenerId, string templateId)
        {
             await AddListenerTemplateAsyncWithHttpInfo(listenerId, templateId);

        }

        /// <summary>
        /// Associates a Template to a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to associate with the Listener</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Object>> AddListenerTemplateAsyncWithHttpInfo (string listenerId, string templateId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->AddListenerTemplate");

            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling ListenerApi->AddListenerTemplate");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Object>("/listeners/{listenerId}/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddListenerTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns></returns>
        public void DeleteListener (string listenerId)
        {
             DeleteListenerWithHttpInfo(listenerId);
        }

        /// <summary>
        /// Deletes a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sweep.Client.ApiResponse<Object> DeleteListenerWithHttpInfo (string listenerId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->DeleteListener");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/listeners/{listenerId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListenerAsync (string listenerId)
        {
             await DeleteListenerAsyncWithHttpInfo(listenerId);

        }

        /// <summary>
        /// Deletes a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to return</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Object>> DeleteListenerAsyncWithHttpInfo (string listenerId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->DeleteListener");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/listeners/{listenerId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disassociates a Template from a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns></returns>
        public void DeleteListenerTemplate (string listenerId, string templateId)
        {
             DeleteListenerTemplateWithHttpInfo(listenerId, templateId);
        }

        /// <summary>
        /// Disassociates a Template from a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sweep.Client.ApiResponse<Object> DeleteListenerTemplateWithHttpInfo (string listenerId, string templateId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->DeleteListenerTemplate");

            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling ListenerApi->DeleteListenerTemplate");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/listeners/{listenerId}/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteListenerTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disassociates a Template from a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteListenerTemplateAsync (string listenerId, string templateId)
        {
             await DeleteListenerTemplateAsyncWithHttpInfo(listenerId, templateId);

        }

        /// <summary>
        /// Disassociates a Template from a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">Listener id to disassociate</param>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Object>> DeleteListenerTemplateAsyncWithHttpInfo (string listenerId, string templateId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->DeleteListenerTemplate");

            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling ListenerApi->DeleteListenerTemplate");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/listeners/{listenerId}/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteListenerTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a listener by ID Returns a listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>Listener</returns>
        public Listener GetListener (string listenerId)
        {
             Sweep.Client.ApiResponse<Listener> localVarResponse = GetListenerWithHttpInfo(listenerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a listener by ID Returns a listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>ApiResponse of Listener</returns>
        public Sweep.Client.ApiResponse< Listener > GetListenerWithHttpInfo (string listenerId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->GetListener");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Get< Listener >("/listeners/{listenerId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a listener by ID Returns a listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>Task of Listener</returns>
        public async System.Threading.Tasks.Task<Listener> GetListenerAsync (string listenerId)
        {
             Sweep.Client.ApiResponse<Listener> localVarResponse = await GetListenerAsyncWithHttpInfo(listenerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a listener by ID Returns a listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <returns>Task of ApiResponse (Listener)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Listener>> GetListenerAsyncWithHttpInfo (string listenerId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->GetListener");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Listener>("/listeners/{listenerId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Templates for Listener Returns a list of templates associated with this listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>List&lt;ListenerTemplate&gt;</returns>
        public List<ListenerTemplate> ListListenerTemplates (string listenerId)
        {
             Sweep.Client.ApiResponse<List<ListenerTemplate>> localVarResponse = ListListenerTemplatesWithHttpInfo(listenerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List Templates for Listener Returns a list of templates associated with this listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>ApiResponse of List&lt;ListenerTemplate&gt;</returns>
        public Sweep.Client.ApiResponse< List<ListenerTemplate> > ListListenerTemplatesWithHttpInfo (string listenerId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->ListListenerTemplates");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<ListenerTemplate> >("/listeners/{listenerId}/templates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListListenerTemplates", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List Templates for Listener Returns a list of templates associated with this listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>Task of List&lt;ListenerTemplate&gt;</returns>
        public async System.Threading.Tasks.Task<List<ListenerTemplate>> ListListenerTemplatesAsync (string listenerId)
        {
             Sweep.Client.ApiResponse<List<ListenerTemplate>> localVarResponse = await ListListenerTemplatesAsyncWithHttpInfo(listenerId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List Templates for Listener Returns a list of templates associated with this listener
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener</param>
        /// <returns>Task of ApiResponse (List&lt;ListenerTemplate&gt;)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<List<ListenerTemplate>>> ListListenerTemplatesAsyncWithHttpInfo (string listenerId)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->ListListenerTemplates");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ListenerTemplate>>("/listeners/{listenerId}/templates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListListenerTemplates", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all Listeners Returns a list of Listeners
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Listener&gt;</returns>
        public List<Listener> ListListeners ()
        {
             Sweep.Client.ApiResponse<List<Listener>> localVarResponse = ListListenersWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Listeners Returns a list of Listeners
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Listener&gt;</returns>
        public Sweep.Client.ApiResponse< List<Listener> > ListListenersWithHttpInfo ()
        {
            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Get< List<Listener> >("/listeners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListListeners", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all Listeners Returns a list of Listeners
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Listener&gt;</returns>
        public async System.Threading.Tasks.Task<List<Listener>> ListListenersAsync ()
        {
             Sweep.Client.ApiResponse<List<Listener>> localVarResponse = await ListListenersAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Listeners Returns a list of Listeners
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Listener&gt;)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<List<Listener>>> ListListenersAsyncWithHttpInfo ()
        {

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Listener>>("/listeners", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListListeners", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all messages Returns a list of messages for the given ListenerAction
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>List&lt;Message&gt;</returns>
        public List<Message> ListMessagesForAction (string listenerActionId)
        {
             Sweep.Client.ApiResponse<List<Message>> localVarResponse = ListMessagesForActionWithHttpInfo(listenerActionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all messages Returns a list of messages for the given ListenerAction
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>ApiResponse of List&lt;Message&gt;</returns>
        public Sweep.Client.ApiResponse< List<Message> > ListMessagesForActionWithHttpInfo (string listenerActionId)
        {
            // verify the required parameter 'listenerActionId' is set
            if (listenerActionId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerActionId' when calling ListenerApi->ListMessagesForAction");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listenerActionId != null)
                requestOptions.PathParameters.Add("listenerActionId", Sweep.Client.ClientUtils.ParameterToString(listenerActionId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Get< List<Message> >("/actions/{listenerActionId}/messages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListMessagesForAction", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all messages Returns a list of messages for the given ListenerAction
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>Task of List&lt;Message&gt;</returns>
        public async System.Threading.Tasks.Task<List<Message>> ListMessagesForActionAsync (string listenerActionId)
        {
             Sweep.Client.ApiResponse<List<Message>> localVarResponse = await ListMessagesForActionAsyncWithHttpInfo(listenerActionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all messages Returns a list of messages for the given ListenerAction
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerActionId">The id of the ListenerAction to limit the results</param>
        /// <returns>Task of ApiResponse (List&lt;Message&gt;)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<List<Message>>> ListMessagesForActionAsyncWithHttpInfo (string listenerActionId)
        {
            // verify the required parameter 'listenerActionId' is set
            if (listenerActionId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerActionId' when calling ListenerApi->ListMessagesForAction");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listenerActionId != null)
                requestOptions.PathParameters.Add("listenerActionId", Sweep.Client.ClientUtils.ParameterToString(listenerActionId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Message>>("/actions/{listenerActionId}/messages", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListMessagesForAction", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Listener</returns>
        public Listener UpdateListener (string listenerId, ListenerRequestBody listenerRequestBody)
        {
             Sweep.Client.ApiResponse<Listener> localVarResponse = UpdateListenerWithHttpInfo(listenerId, listenerRequestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>ApiResponse of Listener</returns>
        public Sweep.Client.ApiResponse< Listener > UpdateListenerWithHttpInfo (string listenerId, ListenerRequestBody listenerRequestBody)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->UpdateListener");

            // verify the required parameter 'listenerRequestBody' is set
            if (listenerRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerRequestBody' when calling ListenerApi->UpdateListener");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter
            requestOptions.Data = listenerRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Put< Listener >("/listeners/{listenerId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Updates a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of Listener</returns>
        public async System.Threading.Tasks.Task<Listener> UpdateListenerAsync (string listenerId, ListenerRequestBody listenerRequestBody)
        {
             Sweep.Client.ApiResponse<Listener> localVarResponse = await UpdateListenerAsyncWithHttpInfo(listenerId, listenerRequestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a Listener 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="listenerId">ID of listener to update</param>
        /// <param name="listenerRequestBody"></param>
        /// <returns>Task of ApiResponse (Listener)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Listener>> UpdateListenerAsyncWithHttpInfo (string listenerId, ListenerRequestBody listenerRequestBody)
        {
            // verify the required parameter 'listenerId' is set
            if (listenerId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerId' when calling ListenerApi->UpdateListener");

            // verify the required parameter 'listenerRequestBody' is set
            if (listenerRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'listenerRequestBody' when calling ListenerApi->UpdateListener");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (listenerId != null)
                requestOptions.PathParameters.Add("listenerId", Sweep.Client.ClientUtils.ParameterToString(listenerId)); // path parameter
            requestOptions.Data = listenerRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Listener>("/listeners/{listenerId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateListener", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
