/* 
 * Sweep API
 *
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sweep.Client;
using Sweep.Model;

namespace Sweep.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>Template</returns>
        Template AddTemplate (TemplateRequestBody templateRequestBody);

        /// <summary>
        /// Create a new Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> AddTemplateWithHttpInfo (TemplateRequestBody templateRequestBody);
        /// <summary>
        /// Deletes a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns></returns>
        void DeleteTemplate (string templateId);

        /// <summary>
        /// Deletes a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteTemplateWithHttpInfo (string templateId);
        /// <summary>
        /// Find Template by ID
        /// </summary>
        /// <remarks>
        /// Returns a single template
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>Template</returns>
        Template GetTemplateById (string templateId);

        /// <summary>
        /// Find Template by ID
        /// </summary>
        /// <remarks>
        /// Returns a single template
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> GetTemplateByIdWithHttpInfo (string templateId);
        /// <summary>
        /// List all Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Template&gt;</returns>
        List<Template> ListTemplate ();

        /// <summary>
        /// List all Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        ApiResponse<List<Template>> ListTemplateWithHttpInfo ();
        /// <summary>
        /// Renders a template using the provided event parameters
        /// </summary>
        /// <remarks>
        /// Returns a string representing the HTML content of an email to be sent
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>Message</returns>
        Message RenderTemplate (string templateId, RenderTemplateRequestBody renderTemplateRequestBody);

        /// <summary>
        /// Renders a template using the provided event parameters
        /// </summary>
        /// <remarks>
        /// Returns a string representing the HTML content of an email to be sent
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> RenderTemplateWithHttpInfo (string templateId, RenderTemplateRequestBody renderTemplateRequestBody);
        /// <summary>
        /// Update an existing Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>Template</returns>
        Template UpdateTemplate (string templateId, TemplateRequestBody templateRequestBody);

        /// <summary>
        /// Update an existing Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>ApiResponse of Template</returns>
        ApiResponse<Template> UpdateTemplateWithHttpInfo (string templateId, TemplateRequestBody templateRequestBody);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> AddTemplateAsync (TemplateRequestBody templateRequestBody);

        /// <summary>
        /// Create a new Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> AddTemplateAsyncWithHttpInfo (TemplateRequestBody templateRequestBody);
        /// <summary>
        /// Deletes a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteTemplateAsync (string templateId);

        /// <summary>
        /// Deletes a Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// Find Template by ID
        /// </summary>
        /// <remarks>
        /// Returns a single template
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> GetTemplateByIdAsync (string templateId);

        /// <summary>
        /// Find Template by ID
        /// </summary>
        /// <remarks>
        /// Returns a single template
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> GetTemplateByIdAsyncWithHttpInfo (string templateId);
        /// <summary>
        /// List all Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Template&gt;</returns>
        System.Threading.Tasks.Task<List<Template>> ListTemplateAsync ();

        /// <summary>
        /// List all Templates
        /// </summary>
        /// <remarks>
        /// Returns a list of templates
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Template>>> ListTemplateAsyncWithHttpInfo ();
        /// <summary>
        /// Renders a template using the provided event parameters
        /// </summary>
        /// <remarks>
        /// Returns a string representing the HTML content of an email to be sent
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> RenderTemplateAsync (string templateId, RenderTemplateRequestBody renderTemplateRequestBody);

        /// <summary>
        /// Renders a template using the provided event parameters
        /// </summary>
        /// <remarks>
        /// Returns a string representing the HTML content of an email to be sent
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> RenderTemplateAsyncWithHttpInfo (string templateId, RenderTemplateRequestBody renderTemplateRequestBody);
        /// <summary>
        /// Update an existing Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>Task of Template</returns>
        System.Threading.Tasks.Task<Template> UpdateTemplateAsync (string templateId, TemplateRequestBody templateRequestBody);

        /// <summary>
        /// Update an existing Template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        System.Threading.Tasks.Task<ApiResponse<Template>> UpdateTemplateAsyncWithHttpInfo (string templateId, TemplateRequestBody templateRequestBody);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplateApi : ITemplateApiSync, ITemplateApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplateApi : ITemplateApi
    {
        private Sweep.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplateApi(String basePath)
        {
            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                new Sweep.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplateApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplateApi(Sweep.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sweep.Client.Configuration.MergeConfigurations(
                Sweep.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sweep.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TemplateApi(Sweep.Client.ISynchronousClient client,Sweep.Client.IAsynchronousClient asyncClient, Sweep.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sweep.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sweep.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sweep.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sweep.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sweep.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>Template</returns>
        public Template AddTemplate (TemplateRequestBody templateRequestBody)
        {
             Sweep.Client.ApiResponse<Template> localVarResponse = AddTemplateWithHttpInfo(templateRequestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>ApiResponse of Template</returns>
        public Sweep.Client.ApiResponse< Template > AddTemplateWithHttpInfo (TemplateRequestBody templateRequestBody)
        {
            // verify the required parameter 'templateRequestBody' is set
            if (templateRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateRequestBody' when calling TemplateApi->AddTemplate");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = templateRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Post< Template >("/templates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a new Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> AddTemplateAsync (TemplateRequestBody templateRequestBody)
        {
             Sweep.Client.ApiResponse<Template> localVarResponse = await AddTemplateAsyncWithHttpInfo(templateRequestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateRequestBody"></param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Template>> AddTemplateAsyncWithHttpInfo (TemplateRequestBody templateRequestBody)
        {
            // verify the required parameter 'templateRequestBody' is set
            if (templateRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateRequestBody' when calling TemplateApi->AddTemplate");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = templateRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Template>("/templates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("AddTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes a Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns></returns>
        public void DeleteTemplate (string templateId)
        {
             DeleteTemplateWithHttpInfo(templateId);
        }

        /// <summary>
        /// Deletes a Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sweep.Client.ApiResponse<Object> DeleteTemplateWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteTemplate");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Delete<Object>("/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deletes a Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteTemplateAsync (string templateId)
        {
             await DeleteTemplateAsyncWithHttpInfo(templateId);

        }

        /// <summary>
        /// Deletes a Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">Template id to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Object>> DeleteTemplateAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->DeleteTemplate");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Object>("/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeleteTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find Template by ID Returns a single template
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>Template</returns>
        public Template GetTemplateById (string templateId)
        {
             Sweep.Client.ApiResponse<Template> localVarResponse = GetTemplateByIdWithHttpInfo(templateId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Find Template by ID Returns a single template
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>ApiResponse of Template</returns>
        public Sweep.Client.ApiResponse< Template > GetTemplateByIdWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetTemplateById");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Template >("/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTemplateById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Find Template by ID Returns a single template
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> GetTemplateByIdAsync (string templateId)
        {
             Sweep.Client.ApiResponse<Template> localVarResponse = await GetTemplateByIdAsyncWithHttpInfo(templateId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Find Template by ID Returns a single template
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Template>> GetTemplateByIdAsyncWithHttpInfo (string templateId)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->GetTemplateById");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Template>("/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetTemplateById", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all Templates Returns a list of templates
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Template&gt;</returns>
        public List<Template> ListTemplate ()
        {
             Sweep.Client.ApiResponse<List<Template>> localVarResponse = ListTemplateWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all Templates Returns a list of templates
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Template&gt;</returns>
        public Sweep.Client.ApiResponse< List<Template> > ListTemplateWithHttpInfo ()
        {
            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Get< List<Template> >("/templates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List all Templates Returns a list of templates
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Template&gt;</returns>
        public async System.Threading.Tasks.Task<List<Template>> ListTemplateAsync ()
        {
             Sweep.Client.ApiResponse<List<Template>> localVarResponse = await ListTemplateAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all Templates Returns a list of templates
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Template&gt;)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<List<Template>>> ListTemplateAsyncWithHttpInfo ()
        {

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Template>>("/templates", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ListTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Renders a template using the provided event parameters Returns a string representing the HTML content of an email to be sent
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>Message</returns>
        public Message RenderTemplate (string templateId, RenderTemplateRequestBody renderTemplateRequestBody)
        {
             Sweep.Client.ApiResponse<Message> localVarResponse = RenderTemplateWithHttpInfo(templateId, renderTemplateRequestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Renders a template using the provided event parameters Returns a string representing the HTML content of an email to be sent
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>ApiResponse of Message</returns>
        public Sweep.Client.ApiResponse< Message > RenderTemplateWithHttpInfo (string templateId, RenderTemplateRequestBody renderTemplateRequestBody)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->RenderTemplate");

            // verify the required parameter 'renderTemplateRequestBody' is set
            if (renderTemplateRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'renderTemplateRequestBody' when calling TemplateApi->RenderTemplate");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            requestOptions.Data = renderTemplateRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Post< Message >("/templates/{templateId}/render", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RenderTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Renders a template using the provided event parameters Returns a string representing the HTML content of an email to be sent
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> RenderTemplateAsync (string templateId, RenderTemplateRequestBody renderTemplateRequestBody)
        {
             Sweep.Client.ApiResponse<Message> localVarResponse = await RenderTemplateAsyncWithHttpInfo(templateId, renderTemplateRequestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Renders a template using the provided event parameters Returns a string representing the HTML content of an email to be sent
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="renderTemplateRequestBody">The event parameters used to render</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Message>> RenderTemplateAsyncWithHttpInfo (string templateId, RenderTemplateRequestBody renderTemplateRequestBody)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->RenderTemplate");

            // verify the required parameter 'renderTemplateRequestBody' is set
            if (renderTemplateRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'renderTemplateRequestBody' when calling TemplateApi->RenderTemplate");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            requestOptions.Data = renderTemplateRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Message>("/templates/{templateId}/render", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RenderTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an existing Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>Template</returns>
        public Template UpdateTemplate (string templateId, TemplateRequestBody templateRequestBody)
        {
             Sweep.Client.ApiResponse<Template> localVarResponse = UpdateTemplateWithHttpInfo(templateId, templateRequestBody);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an existing Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>ApiResponse of Template</returns>
        public Sweep.Client.ApiResponse< Template > UpdateTemplateWithHttpInfo (string templateId, TemplateRequestBody templateRequestBody)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UpdateTemplate");

            // verify the required parameter 'templateRequestBody' is set
            if (templateRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateRequestBody' when calling TemplateApi->UpdateTemplate");

            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sweep.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sweep.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            requestOptions.Data = templateRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = this.Client.Put< Template >("/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an existing Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>Task of Template</returns>
        public async System.Threading.Tasks.Task<Template> UpdateTemplateAsync (string templateId, TemplateRequestBody templateRequestBody)
        {
             Sweep.Client.ApiResponse<Template> localVarResponse = await UpdateTemplateAsyncWithHttpInfo(templateId, templateRequestBody);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an existing Template 
        /// </summary>
        /// <exception cref="Sweep.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templateId">ID of template to return</param>
        /// <param name="templateRequestBody">successful operation</param>
        /// <returns>Task of ApiResponse (Template)</returns>
        public async System.Threading.Tasks.Task<Sweep.Client.ApiResponse<Template>> UpdateTemplateAsyncWithHttpInfo (string templateId, TemplateRequestBody templateRequestBody)
        {
            // verify the required parameter 'templateId' is set
            if (templateId == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateId' when calling TemplateApi->UpdateTemplate");

            // verify the required parameter 'templateRequestBody' is set
            if (templateRequestBody == null)
                throw new Sweep.Client.ApiException(400, "Missing required parameter 'templateRequestBody' when calling TemplateApi->UpdateTemplate");


            Sweep.Client.RequestOptions requestOptions = new Sweep.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (templateId != null)
                requestOptions.PathParameters.Add("templateId", Sweep.Client.ClientUtils.ParameterToString(templateId)); // path parameter
            requestOptions.Data = templateRequestBody;

            // authentication (Google) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                requestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Template>("/templates/{templateId}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdateTemplate", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
