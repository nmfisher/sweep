/* 
 * Sweep API
 *
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sweep.Client;
using Sweep.Api;
using Sweep.Model;

namespace Sweep.Test
{
    /// <summary>
    ///  Class for testing TemplateApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TemplateApiTests : IDisposable
    {
        private TemplateApi instance;

        public TemplateApiTests()
        {
            instance = new TemplateApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TemplateApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TemplateApi
            //Assert.IsType(typeof(TemplateApi), instance, "instance is a TemplateApi");
        }

        
        /// <summary>
        /// Test AddTemplate
        /// </summary>
        [Fact]
        public void AddTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TemplateRequestBody templateRequestBody = null;
            //var response = instance.AddTemplate(templateRequestBody);
            //Assert.IsType<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test DeleteTemplate
        /// </summary>
        [Fact]
        public void DeleteTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //instance.DeleteTemplate(templateId);
            
        }
        
        /// <summary>
        /// Test GetTemplateById
        /// </summary>
        [Fact]
        public void GetTemplateByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //var response = instance.GetTemplateById(templateId);
            //Assert.IsType<Template> (response, "response is Template");
        }
        
        /// <summary>
        /// Test ListTemplate
        /// </summary>
        [Fact]
        public void ListTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListTemplate();
            //Assert.IsType<List<Template>> (response, "response is List<Template>");
        }
        
        /// <summary>
        /// Test RenderTemplate
        /// </summary>
        [Fact]
        public void RenderTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //RenderTemplateRequestBody renderTemplateRequestBody = null;
            //var response = instance.RenderTemplate(templateId, renderTemplateRequestBody);
            //Assert.IsType<Message> (response, "response is Message");
        }
        
        /// <summary>
        /// Test UpdateTemplate
        /// </summary>
        [Fact]
        public void UpdateTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string templateId = null;
            //TemplateRequestBody templateRequestBody = null;
            //var response = instance.UpdateTemplate(templateId, templateRequestBody);
            //Assert.IsType<Template> (response, "response is Template");
        }
        
    }

}
