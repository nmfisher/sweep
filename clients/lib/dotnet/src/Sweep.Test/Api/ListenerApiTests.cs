/* 
 * Sweep API
 *
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sweep.Client;
using Sweep.Api;
using Sweep.Model;

namespace Sweep.Test
{
    /// <summary>
    ///  Class for testing ListenerApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ListenerApiTests : IDisposable
    {
        private ListenerApi instance;

        public ListenerApiTests()
        {
            instance = new ListenerApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ListenerApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' ListenerApi
            //Assert.IsType(typeof(ListenerApi), instance, "instance is a ListenerApi");
        }

        
        /// <summary>
        /// Test AddListener
        /// </summary>
        [Fact]
        public void AddListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ListenerRequestBody listenerRequestBody = null;
            //var response = instance.AddListener(listenerRequestBody);
            //Assert.IsType<Listener> (response, "response is Listener");
        }
        
        /// <summary>
        /// Test AddListenerTemplate
        /// </summary>
        [Fact]
        public void AddListenerTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listenerId = null;
            //string templateId = null;
            //instance.AddListenerTemplate(listenerId, templateId);
            
        }
        
        /// <summary>
        /// Test DeleteListener
        /// </summary>
        [Fact]
        public void DeleteListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listenerId = null;
            //instance.DeleteListener(listenerId);
            
        }
        
        /// <summary>
        /// Test DeleteListenerTemplate
        /// </summary>
        [Fact]
        public void DeleteListenerTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listenerId = null;
            //string templateId = null;
            //instance.DeleteListenerTemplate(listenerId, templateId);
            
        }
        
        /// <summary>
        /// Test GetListener
        /// </summary>
        [Fact]
        public void GetListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listenerId = null;
            //var response = instance.GetListener(listenerId);
            //Assert.IsType<Listener> (response, "response is Listener");
        }
        
        /// <summary>
        /// Test ListListenerTemplates
        /// </summary>
        [Fact]
        public void ListListenerTemplatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listenerId = null;
            //var response = instance.ListListenerTemplates(listenerId);
            //Assert.IsType<List<ListenerTemplate>> (response, "response is List<ListenerTemplate>");
        }
        
        /// <summary>
        /// Test ListListeners
        /// </summary>
        [Fact]
        public void ListListenersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ListListeners();
            //Assert.IsType<List<Listener>> (response, "response is List<Listener>");
        }
        
        /// <summary>
        /// Test ListMessagesForAction
        /// </summary>
        [Fact]
        public void ListMessagesForActionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listenerActionId = null;
            //var response = instance.ListMessagesForAction(listenerActionId);
            //Assert.IsType<List<Message>> (response, "response is List<Message>");
        }
        
        /// <summary>
        /// Test UpdateListener
        /// </summary>
        [Fact]
        public void UpdateListenerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string listenerId = null;
            //ListenerRequestBody listenerRequestBody = null;
            //var response = instance.UpdateListener(listenerId, listenerRequestBody);
            //Assert.IsType<Listener> (response, "response is Listener");
        }
        
    }

}
