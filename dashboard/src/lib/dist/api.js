"use strict";
// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Sweep API
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var url = require("url");
var axios_1 = require("axios");
var base_1 = require("./base");
/**
 * EventApi - axios parameter creator
 * @export
 */
exports.EventApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Raise an event
         * @param {EventRequestBody} eventRequestBody Raises an Event with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent: function (eventRequestBody, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'eventRequestBody' is not null or undefined
            if (eventRequestBody === null || eventRequestBody === undefined) {
                throw new base_1.RequiredError('eventRequestBody', 'Required parameter eventRequestBody was null or undefined when calling addEvent.');
            }
            var localVarPath = "/events";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'POST' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication api_key required
            if (configuration && configuration.apiKey) {
                var localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarHeaderParameter["api_key"] = localVarApiKeyValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("EventRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(eventRequestBody !== undefined ? eventRequestBody : {}) : (eventRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find raised event by ID
         * @param {string} eventId ID of event that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: function (eventId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'eventId' is not null or undefined
            if (eventId === null || eventId === undefined) {
                throw new base_1.RequiredError('eventId', 'Required parameter eventId was null or undefined when calling getEventById.');
            }
            var localVarPath = "/events/{eventId}"
                .replace("{" + "eventId" + "}", encodeURIComponent(String(eventId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all events
         * @summary List all received events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/events";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * EventApi - functional programming interface
 * @export
 */
exports.EventApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Raise an event
         * @param {EventRequestBody} eventRequestBody Raises an Event with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent: function (eventRequestBody, options) {
            var localVarAxiosArgs = exports.EventApiAxiosParamCreator(configuration).addEvent(eventRequestBody, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Find raised event by ID
         * @param {string} eventId ID of event that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: function (eventId, options) {
            var localVarAxiosArgs = exports.EventApiAxiosParamCreator(configuration).getEventById(eventId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of all events
         * @summary List all received events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: function (options) {
            var localVarAxiosArgs = exports.EventApiAxiosParamCreator(configuration).listEvents(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * EventApi - factory interface
 * @export
 */
exports.EventApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Raise an event
         * @param {EventRequestBody} eventRequestBody Raises an Event with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent: function (eventRequestBody, options) {
            return exports.EventApiFp(configuration).addEvent(eventRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Find raised event by ID
         * @param {string} eventId ID of event that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById: function (eventId, options) {
            return exports.EventApiFp(configuration).getEventById(eventId, options)(axios, basePath);
        },
        /**
         * Returns a list of all events
         * @summary List all received events
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents: function (options) {
            return exports.EventApiFp(configuration).listEvents(options)(axios, basePath);
        },
    };
};
/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
var EventApi = /** @class */ (function (_super) {
    __extends(EventApi, _super);
    function EventApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Raise an event
     * @param {EventRequestBody} eventRequestBody Raises an Event with associated parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    EventApi.prototype.addEvent = function (eventRequestBody, options) {
        return exports.EventApiFp(this.configuration).addEvent(eventRequestBody, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Find raised event by ID
     * @param {string} eventId ID of event that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    EventApi.prototype.getEventById = function (eventId, options) {
        return exports.EventApiFp(this.configuration).getEventById(eventId, options)(this.axios, this.basePath);
    };
    /**
     * Returns a list of all events
     * @summary List all received events
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    EventApi.prototype.listEvents = function (options) {
        return exports.EventApiFp(this.configuration).listEvents(options)(this.axios, this.basePath);
    };
    return EventApi;
}(base_1.BaseAPI));
exports.EventApi = EventApi;
/**
 * ListenerApi - axios parameter creator
 * @export
 */
exports.ListenerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Listener
         * @param {Listener} listener A Listener object to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListener: function (listener, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'listener' is not null or undefined
            if (listener === null || listener === undefined) {
                throw new base_1.RequiredError('listener', 'Required parameter listener was null or undefined when calling addListener.');
            }
            var localVarPath = "/listeners";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'POST' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Listener" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(listener !== undefined ? listener : {}) : (listener || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Associates a Template to a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to associate with the Listener
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListenerTemplate: function (listenerId, templateId, apiKey, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new base_1.RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling addListenerTemplate.');
            }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new base_1.RequiredError('templateId', 'Required parameter templateId was null or undefined when calling addListenerTemplate.');
            }
            var localVarPath = "/listeners/{listenerId}/templates/{templateId}"
                .replace("{" + "listenerId" + "}", encodeURIComponent(String(listenerId)))
                .replace("{" + "templateId" + "}", encodeURIComponent(String(templateId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'POST' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a Listener
         * @param {string} listenerId ID of listener to return
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListener: function (listenerId, apiKey, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new base_1.RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling deleteListener.');
            }
            var localVarPath = "/listeners/{listenerId}"
                .replace("{" + "listenerId" + "}", encodeURIComponent(String(listenerId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'DELETE' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Disassociates a Template from a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to delete
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListenerTemplate: function (listenerId, templateId, apiKey, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new base_1.RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling deleteListenerTemplate.');
            }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new base_1.RequiredError('templateId', 'Required parameter templateId was null or undefined when calling deleteListenerTemplate.');
            }
            var localVarPath = "/listeners/{listenerId}/templates/{templateId}"
                .replace("{" + "listenerId" + "}", encodeURIComponent(String(listenerId)))
                .replace("{" + "templateId" + "}", encodeURIComponent(String(templateId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'DELETE' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of templates associated with this listener
         * @summary List Templates for Listener
         * @param {string} listenerId ID of listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListenerTemplates: function (listenerId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new base_1.RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling listListenerTemplates.');
            }
            var localVarPath = "/listeners/{listenerId}/templates"
                .replace("{" + "listenerId" + "}", encodeURIComponent(String(listenerId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Listeners
         * @summary List all Listeners
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListeners: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/listeners";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ListenerApi - functional programming interface
 * @export
 */
exports.ListenerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Listener
         * @param {Listener} listener A Listener object to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListener: function (listener, options) {
            var localVarAxiosArgs = exports.ListenerApiAxiosParamCreator(configuration).addListener(listener, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Associates a Template to a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to associate with the Listener
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListenerTemplate: function (listenerId, templateId, apiKey, options) {
            var localVarAxiosArgs = exports.ListenerApiAxiosParamCreator(configuration).addListenerTemplate(listenerId, templateId, apiKey, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a Listener
         * @param {string} listenerId ID of listener to return
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListener: function (listenerId, apiKey, options) {
            var localVarAxiosArgs = exports.ListenerApiAxiosParamCreator(configuration).deleteListener(listenerId, apiKey, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Disassociates a Template from a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to delete
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListenerTemplate: function (listenerId, templateId, apiKey, options) {
            var localVarAxiosArgs = exports.ListenerApiAxiosParamCreator(configuration).deleteListenerTemplate(listenerId, templateId, apiKey, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of templates associated with this listener
         * @summary List Templates for Listener
         * @param {string} listenerId ID of listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListenerTemplates: function (listenerId, options) {
            var localVarAxiosArgs = exports.ListenerApiAxiosParamCreator(configuration).listListenerTemplates(listenerId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of Listeners
         * @summary List all Listeners
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListeners: function (options) {
            var localVarAxiosArgs = exports.ListenerApiAxiosParamCreator(configuration).listListeners(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ListenerApi - factory interface
 * @export
 */
exports.ListenerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a new Listener
         * @param {Listener} listener A Listener object to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListener: function (listener, options) {
            return exports.ListenerApiFp(configuration).addListener(listener, options)(axios, basePath);
        },
        /**
         *
         * @summary Associates a Template to a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to associate with the Listener
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListenerTemplate: function (listenerId, templateId, apiKey, options) {
            return exports.ListenerApiFp(configuration).addListenerTemplate(listenerId, templateId, apiKey, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes a Listener
         * @param {string} listenerId ID of listener to return
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListener: function (listenerId, apiKey, options) {
            return exports.ListenerApiFp(configuration).deleteListener(listenerId, apiKey, options)(axios, basePath);
        },
        /**
         *
         * @summary Disassociates a Template from a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to delete
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListenerTemplate: function (listenerId, templateId, apiKey, options) {
            return exports.ListenerApiFp(configuration).deleteListenerTemplate(listenerId, templateId, apiKey, options)(axios, basePath);
        },
        /**
         * Returns a list of templates associated with this listener
         * @summary List Templates for Listener
         * @param {string} listenerId ID of listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListenerTemplates: function (listenerId, options) {
            return exports.ListenerApiFp(configuration).listListenerTemplates(listenerId, options)(axios, basePath);
        },
        /**
         * Returns a list of Listeners
         * @summary List all Listeners
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListeners: function (options) {
            return exports.ListenerApiFp(configuration).listListeners(options)(axios, basePath);
        },
    };
};
/**
 * ListenerApi - object-oriented interface
 * @export
 * @class ListenerApi
 * @extends {BaseAPI}
 */
var ListenerApi = /** @class */ (function (_super) {
    __extends(ListenerApi, _super);
    function ListenerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a new Listener
     * @param {Listener} listener A Listener object to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    ListenerApi.prototype.addListener = function (listener, options) {
        return exports.ListenerApiFp(this.configuration).addListener(listener, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Associates a Template to a Listener
     * @param {string} listenerId Listener id to disassociate
     * @param {string} templateId Template id to associate with the Listener
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    ListenerApi.prototype.addListenerTemplate = function (listenerId, templateId, apiKey, options) {
        return exports.ListenerApiFp(this.configuration).addListenerTemplate(listenerId, templateId, apiKey, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Deletes a Listener
     * @param {string} listenerId ID of listener to return
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    ListenerApi.prototype.deleteListener = function (listenerId, apiKey, options) {
        return exports.ListenerApiFp(this.configuration).deleteListener(listenerId, apiKey, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Disassociates a Template from a Listener
     * @param {string} listenerId Listener id to disassociate
     * @param {string} templateId Template id to delete
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    ListenerApi.prototype.deleteListenerTemplate = function (listenerId, templateId, apiKey, options) {
        return exports.ListenerApiFp(this.configuration).deleteListenerTemplate(listenerId, templateId, apiKey, options)(this.axios, this.basePath);
    };
    /**
     * Returns a list of templates associated with this listener
     * @summary List Templates for Listener
     * @param {string} listenerId ID of listener
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    ListenerApi.prototype.listListenerTemplates = function (listenerId, options) {
        return exports.ListenerApiFp(this.configuration).listListenerTemplates(listenerId, options)(this.axios, this.basePath);
    };
    /**
     * Returns a list of Listeners
     * @summary List all Listeners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    ListenerApi.prototype.listListeners = function (options) {
        return exports.ListenerApiFp(this.configuration).listListeners(options)(this.axios, this.basePath);
    };
    return ListenerApi;
}(base_1.BaseAPI));
exports.ListenerApi = ListenerApi;
/**
 * MessageApi - axios parameter creator
 * @export
 */
exports.MessageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {string} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById: function (messageId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new base_1.RequiredError('messageId', 'Required parameter messageId was null or undefined when calling getMessageById.');
            }
            var localVarPath = "/messages/{messageId}"
                .replace("{" + "messageId" + "}", encodeURIComponent(String(messageId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of messages
         * @summary List all messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessages: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/messages";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MessageApi - functional programming interface
 * @export
 */
exports.MessageApiFp = function (configuration) {
    return {
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {string} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById: function (messageId, options) {
            var localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).getMessageById(messageId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of messages
         * @summary List all messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessages: function (options) {
            var localVarAxiosArgs = exports.MessageApiAxiosParamCreator(configuration).listMessages(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MessageApi - factory interface
 * @export
 */
exports.MessageApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {string} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById: function (messageId, options) {
            return exports.MessageApiFp(configuration).getMessageById(messageId, options)(axios, basePath);
        },
        /**
         * Returns a list of messages
         * @summary List all messages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessages: function (options) {
            return exports.MessageApiFp(configuration).listMessages(options)(axios, basePath);
        },
    };
};
/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
var MessageApi = /** @class */ (function (_super) {
    __extends(MessageApi, _super);
    function MessageApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns a single message
     * @summary Find message by ID
     * @param {string} messageId ID of message to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    MessageApi.prototype.getMessageById = function (messageId, options) {
        return exports.MessageApiFp(this.configuration).getMessageById(messageId, options)(this.axios, this.basePath);
    };
    /**
     * Returns a list of messages
     * @summary List all messages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    MessageApi.prototype.listMessages = function (options) {
        return exports.MessageApiFp(this.configuration).listMessages(options)(this.axios, this.basePath);
    };
    return MessageApi;
}(base_1.BaseAPI));
exports.MessageApi = MessageApi;
/**
 * TemplateApi - axios parameter creator
 * @export
 */
exports.TemplateApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Template
         * @param {Template} template A Template object with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate: function (template, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new base_1.RequiredError('template', 'Required parameter template was null or undefined when calling addTemplate.');
            }
            var localVarPath = "/templates";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'POST' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Template" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a Template
         * @param {string} templateId Template id to delete
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: function (templateId, apiKey, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new base_1.RequiredError('templateId', 'Required parameter templateId was null or undefined when calling deleteTemplate.');
            }
            var localVarPath = "/templates/{templateId}"
                .replace("{" + "templateId" + "}", encodeURIComponent(String(templateId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'DELETE' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single template
         * @summary Find Template by ID
         * @param {string} templateId ID of template to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById: function (templateId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new base_1.RequiredError('templateId', 'Required parameter templateId was null or undefined when calling getTemplateById.');
            }
            var localVarPath = "/templates/{templateId}"
                .replace("{" + "templateId" + "}", encodeURIComponent(String(templateId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of templates
         * @summary List all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplate: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/templates";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing Template
         * @param {string} templateId ID of template to return
         * @param {Template} template A Template object with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: function (templateId, template, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new base_1.RequiredError('templateId', 'Required parameter templateId was null or undefined when calling updateTemplate.');
            }
            // verify required parameter 'template' is not null or undefined
            if (template === null || template === undefined) {
                throw new base_1.RequiredError('template', 'Required parameter template was null or undefined when calling updateTemplate.');
            }
            var localVarPath = "/templates/{templateId}"
                .replace("{" + "templateId" + "}", encodeURIComponent(String(templateId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'PUT' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                var localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("Template" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TemplateApi - functional programming interface
 * @export
 */
exports.TemplateApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Template
         * @param {Template} template A Template object with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate: function (template, options) {
            var localVarAxiosArgs = exports.TemplateApiAxiosParamCreator(configuration).addTemplate(template, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a Template
         * @param {string} templateId Template id to delete
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: function (templateId, apiKey, options) {
            var localVarAxiosArgs = exports.TemplateApiAxiosParamCreator(configuration).deleteTemplate(templateId, apiKey, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single template
         * @summary Find Template by ID
         * @param {string} templateId ID of template to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById: function (templateId, options) {
            var localVarAxiosArgs = exports.TemplateApiAxiosParamCreator(configuration).getTemplateById(templateId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of templates
         * @summary List all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplate: function (options) {
            var localVarAxiosArgs = exports.TemplateApiAxiosParamCreator(configuration).listTemplate(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update an existing Template
         * @param {string} templateId ID of template to return
         * @param {Template} template A Template object with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: function (templateId, template, options) {
            var localVarAxiosArgs = exports.TemplateApiAxiosParamCreator(configuration).updateTemplate(templateId, template, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TemplateApi - factory interface
 * @export
 */
exports.TemplateApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a new Template
         * @param {Template} template A Template object with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate: function (template, options) {
            return exports.TemplateApiFp(configuration).addTemplate(template, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes a Template
         * @param {string} templateId Template id to delete
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: function (templateId, apiKey, options) {
            return exports.TemplateApiFp(configuration).deleteTemplate(templateId, apiKey, options)(axios, basePath);
        },
        /**
         * Returns a single template
         * @summary Find Template by ID
         * @param {string} templateId ID of template to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById: function (templateId, options) {
            return exports.TemplateApiFp(configuration).getTemplateById(templateId, options)(axios, basePath);
        },
        /**
         * Returns a list of templates
         * @summary List all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplate: function (options) {
            return exports.TemplateApiFp(configuration).listTemplate(options)(axios, basePath);
        },
        /**
         *
         * @summary Update an existing Template
         * @param {string} templateId ID of template to return
         * @param {Template} template A Template object with associated parameters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate: function (templateId, template, options) {
            return exports.TemplateApiFp(configuration).updateTemplate(templateId, template, options)(axios, basePath);
        },
    };
};
/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
var TemplateApi = /** @class */ (function (_super) {
    __extends(TemplateApi, _super);
    function TemplateApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create a new Template
     * @param {Template} template A Template object with associated parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    TemplateApi.prototype.addTemplate = function (template, options) {
        return exports.TemplateApiFp(this.configuration).addTemplate(template, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Deletes a Template
     * @param {string} templateId Template id to delete
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    TemplateApi.prototype.deleteTemplate = function (templateId, apiKey, options) {
        return exports.TemplateApiFp(this.configuration).deleteTemplate(templateId, apiKey, options)(this.axios, this.basePath);
    };
    /**
     * Returns a single template
     * @summary Find Template by ID
     * @param {string} templateId ID of template to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    TemplateApi.prototype.getTemplateById = function (templateId, options) {
        return exports.TemplateApiFp(this.configuration).getTemplateById(templateId, options)(this.axios, this.basePath);
    };
    /**
     * Returns a list of templates
     * @summary List all Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    TemplateApi.prototype.listTemplate = function (options) {
        return exports.TemplateApiFp(this.configuration).listTemplate(options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Update an existing Template
     * @param {string} templateId ID of template to return
     * @param {Template} template A Template object with associated parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    TemplateApi.prototype.updateTemplate = function (templateId, template, options) {
        return exports.TemplateApiFp(this.configuration).updateTemplate(templateId, template, options)(this.axios, this.basePath);
    };
    return TemplateApi;
}(base_1.BaseAPI));
exports.TemplateApi = TemplateApi;
/**
 * UserApi - axios parameter creator
 * @export
 */
exports.UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @param {User} user Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new base_1.RequiredError('user', 'Required parameter user was null or undefined when calling createUser.');
            }
            var localVarPath = "/user";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'POST' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} userId The ID of the user to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling deleteUser.');
            }
            var localVarPath = "/user/{userId}"
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'DELETE' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user by user name
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName: function (userId, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling getUserByName.');
            }
            var localVarPath = "/user/{userId}"
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: function (username, password, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new base_1.RequiredError('username', 'Required parameter username was null or undefined when calling loginUser.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new base_1.RequiredError('password', 'Required parameter password was null or undefined when calling loginUser.');
            }
            var localVarPath = "/user/login";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser: function (options) {
            if (options === void 0) { options = {}; }
            var localVarPath = "/user/logout";
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'GET' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {string} userId ID of the user ame that need to be updated
         * @param {User} user Updated user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (userId, user, options) {
            if (options === void 0) { options = {}; }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new base_1.RequiredError('userId', 'Required parameter userId was null or undefined when calling updateUser.');
            }
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new base_1.RequiredError('user', 'Required parameter user was null or undefined when calling updateUser.');
            }
            var localVarPath = "/user/{userId}"
                .replace("{" + "userId" + "}", encodeURIComponent(String(userId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            var localVarRequestOptions = __assign({ method: 'PUT' }, baseOptions, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = __assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = __assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = ("User" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
exports.UserApiFp = function (configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @param {User} user Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (user, options) {
            var localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).createUser(user, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} userId The ID of the user to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            var localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).deleteUser(userId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get user by user name
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName: function (userId, options) {
            var localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).getUserByName(userId, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: function (username, password, options) {
            var localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).loginUser(username, password, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser: function (options) {
            var localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).logoutUser(options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {string} userId ID of the user ame that need to be updated
         * @param {User} user Updated user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (userId, user, options) {
            var localVarAxiosArgs = exports.UserApiAxiosParamCreator(configuration).updateUser(userId, user, options);
            return function (axios, basePath) {
                if (axios === void 0) { axios = axios_1.default; }
                if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                var axiosRequestArgs = __assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
exports.UserApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Create user
         * @param {User} user Created user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: function (user, options) {
            return exports.UserApiFp(configuration).createUser(user, options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {string} userId The ID of the user to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: function (userId, options) {
            return exports.UserApiFp(configuration).deleteUser(userId, options)(axios, basePath);
        },
        /**
         *
         * @summary Get user by user name
         * @param {string} userId The user id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByName: function (userId, options) {
            return exports.UserApiFp(configuration).getUserByName(userId, options)(axios, basePath);
        },
        /**
         *
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser: function (username, password, options) {
            return exports.UserApiFp(configuration).loginUser(username, password, options)(axios, basePath);
        },
        /**
         *
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser: function (options) {
            return exports.UserApiFp(configuration).logoutUser(options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {string} userId ID of the user ame that need to be updated
         * @param {User} user Updated user object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: function (userId, user, options) {
            return exports.UserApiFp(configuration).updateUser(userId, user, options)(axios, basePath);
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This can only be done by the logged in user.
     * @summary Create user
     * @param {User} user Created user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.createUser = function (user, options) {
        return exports.UserApiFp(this.configuration).createUser(user, options)(this.axios, this.basePath);
    };
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {string} userId The ID of the user to be deleted
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.deleteUser = function (userId, options) {
        return exports.UserApiFp(this.configuration).deleteUser(userId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Get user by user name
     * @param {string} userId The user id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.getUserByName = function (userId, options) {
        return exports.UserApiFp(this.configuration).getUserByName(userId, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Logs user into the system
     * @param {string} username The user name for login
     * @param {string} password The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.loginUser = function (username, password, options) {
        return exports.UserApiFp(this.configuration).loginUser(username, password, options)(this.axios, this.basePath);
    };
    /**
     *
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.logoutUser = function (options) {
        return exports.UserApiFp(this.configuration).logoutUser(options)(this.axios, this.basePath);
    };
    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param {string} userId ID of the user ame that need to be updated
     * @param {User} user Updated user object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.updateUser = function (userId, user, options) {
        return exports.UserApiFp(this.configuration).updateUser(userId, user, options)(this.axios, this.basePath);
    };
    return UserApi;
}(base_1.BaseAPI));
exports.UserApi = UserApi;
