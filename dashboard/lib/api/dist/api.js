// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Sweep API
 * API definitions for the Sweep server/dashboard.
 *
 * OpenAPI spec version: 1.0.0-oas3
 * Contact: contact@avinium.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as url from 'url';
import globalAxios from 'axios';
import { BASE_PATH, BaseAPI, RequiredError } from './base';
/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Raise an event
         * @param {EventRequestBody} eventRequestBody
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent(eventRequestBody, apiKey, options = {}) {
            // verify required parameter 'eventRequestBody' is not null or undefined
            if (eventRequestBody === null || eventRequestBody === undefined) {
                throw new RequiredError('eventRequestBody', 'Required parameter eventRequestBody was null or undefined when calling addEvent.');
            }
            const localVarPath = `/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication api_key required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("api_key")
                    : configuration.apiKey;
                localVarHeaderParameter["api_key"] = localVarApiKeyValue;
            }
            if (apiKey !== undefined && apiKey !== null) {
                localVarHeaderParameter['api_key'] = String(apiKey);
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("EventRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(eventRequestBody !== undefined ? eventRequestBody : {}) : (eventRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Find raised event by ID
         * @param {string} eventId ID of event that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(eventId, options = {}) {
            // verify required parameter 'eventId' is not null or undefined
            if (eventId === null || eventId === undefined) {
                throw new RequiredError('eventId', 'Required parameter eventId was null or undefined when calling getEventById.');
            }
            const localVarPath = `/events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all events
         * @summary List all received events
         * @param {boolean} [withActions]
         * @param {Date} [startDate]
         * @param {Date} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(withActions, startDate, endDate, options = {}) {
            const localVarPath = `/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (withActions !== undefined) {
                localVarQueryParameter['withActions'] = withActions;
            }
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate.toISOString();
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate.toISOString();
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Raise an event
         * @param {EventRequestBody} eventRequestBody
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent(eventRequestBody, apiKey, options) {
            const localVarAxiosArgs = EventApiAxiosParamCreator(configuration).addEvent(eventRequestBody, apiKey, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Find raised event by ID
         * @param {string} eventId ID of event that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(eventId, options) {
            const localVarAxiosArgs = EventApiAxiosParamCreator(configuration).getEventById(eventId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of all events
         * @summary List all received events
         * @param {boolean} [withActions]
         * @param {Date} [startDate]
         * @param {Date} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(withActions, startDate, endDate, options) {
            const localVarAxiosArgs = EventApiAxiosParamCreator(configuration).listEvents(withActions, startDate, endDate, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Raise an event
         * @param {EventRequestBody} eventRequestBody
         * @param {string} [apiKey]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEvent(eventRequestBody, apiKey, options) {
            return EventApiFp(configuration).addEvent(eventRequestBody, apiKey, options)(axios, basePath);
        },
        /**
         *
         * @summary Find raised event by ID
         * @param {string} eventId ID of event that needs to be fetched
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventById(eventId, options) {
            return EventApiFp(configuration).getEventById(eventId, options)(axios, basePath);
        },
        /**
         * Returns a list of all events
         * @summary List all received events
         * @param {boolean} [withActions]
         * @param {Date} [startDate]
         * @param {Date} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEvents(withActions, startDate, endDate, options) {
            return EventApiFp(configuration).listEvents(withActions, startDate, endDate, options)(axios, basePath);
        },
    };
};
/**
 * EventApi - object-oriented interface
 * @export
 * @class EventApi
 * @extends {BaseAPI}
 */
export class EventApi extends BaseAPI {
    /**
     *
     * @summary Raise an event
     * @param {EventRequestBody} eventRequestBody
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    addEvent(eventRequestBody, apiKey, options) {
        return EventApiFp(this.configuration).addEvent(eventRequestBody, apiKey, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Find raised event by ID
     * @param {string} eventId ID of event that needs to be fetched
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    getEventById(eventId, options) {
        return EventApiFp(this.configuration).getEventById(eventId, options)(this.axios, this.basePath);
    }
    /**
     * Returns a list of all events
     * @summary List all received events
     * @param {boolean} [withActions]
     * @param {Date} [startDate]
     * @param {Date} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApi
     */
    listEvents(withActions, startDate, endDate, options) {
        return EventApiFp(this.configuration).listEvents(withActions, startDate, endDate, options)(this.axios, this.basePath);
    }
}
/**
 * ListenerApi - axios parameter creator
 * @export
 */
export const ListenerApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Listener
         * @param {ListenerRequestBody} listenerRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListener(listenerRequestBody, options = {}) {
            // verify required parameter 'listenerRequestBody' is not null or undefined
            if (listenerRequestBody === null || listenerRequestBody === undefined) {
                throw new RequiredError('listenerRequestBody', 'Required parameter listenerRequestBody was null or undefined when calling addListener.');
            }
            const localVarPath = `/listeners`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ListenerRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(listenerRequestBody !== undefined ? listenerRequestBody : {}) : (listenerRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Associates a Template to a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to associate with the Listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListenerTemplate(listenerId, templateId, options = {}) {
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling addListenerTemplate.');
            }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId', 'Required parameter templateId was null or undefined when calling addListenerTemplate.');
            }
            const localVarPath = `/listeners/{listenerId}/templates/{templateId}`
                .replace(`{${"listenerId"}}`, encodeURIComponent(String(listenerId)))
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a Listener
         * @param {string} listenerId ID of listener to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListener(listenerId, options = {}) {
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling deleteListener.');
            }
            const localVarPath = `/listeners/{listenerId}`
                .replace(`{${"listenerId"}}`, encodeURIComponent(String(listenerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Disassociates a Template from a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListenerTemplate(listenerId, templateId, options = {}) {
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling deleteListenerTemplate.');
            }
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId', 'Required parameter templateId was null or undefined when calling deleteListenerTemplate.');
            }
            const localVarPath = `/listeners/{listenerId}/templates/{templateId}`
                .replace(`{${"listenerId"}}`, encodeURIComponent(String(listenerId)))
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a listener
         * @summary Get a listener by ID
         * @param {string} listenerId ID of listener to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListener(listenerId, options = {}) {
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling getListener.');
            }
            const localVarPath = `/listeners/{listenerId}`
                .replace(`{${"listenerId"}}`, encodeURIComponent(String(listenerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of templates associated with this listener
         * @summary List Templates for Listener
         * @param {string} listenerId ID of listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListenerTemplates(listenerId, options = {}) {
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling listListenerTemplates.');
            }
            const localVarPath = `/listeners/{listenerId}/templates`
                .replace(`{${"listenerId"}}`, encodeURIComponent(String(listenerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Listeners
         * @summary List all Listeners
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListeners(options = {}) {
            const localVarPath = `/listeners`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of messages for the given ListenerAction
         * @summary List all messages
         * @param {string} listenerActionId The id of the ListenerAction to limit the results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesForAction(listenerActionId, options = {}) {
            // verify required parameter 'listenerActionId' is not null or undefined
            if (listenerActionId === null || listenerActionId === undefined) {
                throw new RequiredError('listenerActionId', 'Required parameter listenerActionId was null or undefined when calling listMessagesForAction.');
            }
            const localVarPath = `/actions/{listenerActionId}/messages`
                .replace(`{${"listenerActionId"}}`, encodeURIComponent(String(listenerActionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Updates a Listener
         * @param {string} listenerId ID of listener to update
         * @param {ListenerRequestBody} listenerRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListener(listenerId, listenerRequestBody, options = {}) {
            // verify required parameter 'listenerId' is not null or undefined
            if (listenerId === null || listenerId === undefined) {
                throw new RequiredError('listenerId', 'Required parameter listenerId was null or undefined when calling updateListener.');
            }
            // verify required parameter 'listenerRequestBody' is not null or undefined
            if (listenerRequestBody === null || listenerRequestBody === undefined) {
                throw new RequiredError('listenerRequestBody', 'Required parameter listenerRequestBody was null or undefined when calling updateListener.');
            }
            const localVarPath = `/listeners/{listenerId}`
                .replace(`{${"listenerId"}}`, encodeURIComponent(String(listenerId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("ListenerRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(listenerRequestBody !== undefined ? listenerRequestBody : {}) : (listenerRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ListenerApi - functional programming interface
 * @export
 */
export const ListenerApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Listener
         * @param {ListenerRequestBody} listenerRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListener(listenerRequestBody, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).addListener(listenerRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Associates a Template to a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to associate with the Listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListenerTemplate(listenerId, templateId, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).addListenerTemplate(listenerId, templateId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a Listener
         * @param {string} listenerId ID of listener to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListener(listenerId, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).deleteListener(listenerId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Disassociates a Template from a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListenerTemplate(listenerId, templateId, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).deleteListenerTemplate(listenerId, templateId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a listener
         * @summary Get a listener by ID
         * @param {string} listenerId ID of listener to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListener(listenerId, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).getListener(listenerId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of templates associated with this listener
         * @summary List Templates for Listener
         * @param {string} listenerId ID of listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListenerTemplates(listenerId, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).listListenerTemplates(listenerId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of Listeners
         * @summary List all Listeners
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListeners(options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).listListeners(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of messages for the given ListenerAction
         * @summary List all messages
         * @param {string} listenerActionId The id of the ListenerAction to limit the results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesForAction(listenerActionId, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).listMessagesForAction(listenerActionId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Updates a Listener
         * @param {string} listenerId ID of listener to update
         * @param {ListenerRequestBody} listenerRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListener(listenerId, listenerRequestBody, options) {
            const localVarAxiosArgs = ListenerApiAxiosParamCreator(configuration).updateListener(listenerId, listenerRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ListenerApi - factory interface
 * @export
 */
export const ListenerApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a new Listener
         * @param {ListenerRequestBody} listenerRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListener(listenerRequestBody, options) {
            return ListenerApiFp(configuration).addListener(listenerRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Associates a Template to a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to associate with the Listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addListenerTemplate(listenerId, templateId, options) {
            return ListenerApiFp(configuration).addListenerTemplate(listenerId, templateId, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes a Listener
         * @param {string} listenerId ID of listener to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListener(listenerId, options) {
            return ListenerApiFp(configuration).deleteListener(listenerId, options)(axios, basePath);
        },
        /**
         *
         * @summary Disassociates a Template from a Listener
         * @param {string} listenerId Listener id to disassociate
         * @param {string} templateId Template id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteListenerTemplate(listenerId, templateId, options) {
            return ListenerApiFp(configuration).deleteListenerTemplate(listenerId, templateId, options)(axios, basePath);
        },
        /**
         * Returns a listener
         * @summary Get a listener by ID
         * @param {string} listenerId ID of listener to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListener(listenerId, options) {
            return ListenerApiFp(configuration).getListener(listenerId, options)(axios, basePath);
        },
        /**
         * Returns a list of templates associated with this listener
         * @summary List Templates for Listener
         * @param {string} listenerId ID of listener
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListenerTemplates(listenerId, options) {
            return ListenerApiFp(configuration).listListenerTemplates(listenerId, options)(axios, basePath);
        },
        /**
         * Returns a list of Listeners
         * @summary List all Listeners
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listListeners(options) {
            return ListenerApiFp(configuration).listListeners(options)(axios, basePath);
        },
        /**
         * Returns a list of messages for the given ListenerAction
         * @summary List all messages
         * @param {string} listenerActionId The id of the ListenerAction to limit the results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessagesForAction(listenerActionId, options) {
            return ListenerApiFp(configuration).listMessagesForAction(listenerActionId, options)(axios, basePath);
        },
        /**
         *
         * @summary Updates a Listener
         * @param {string} listenerId ID of listener to update
         * @param {ListenerRequestBody} listenerRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateListener(listenerId, listenerRequestBody, options) {
            return ListenerApiFp(configuration).updateListener(listenerId, listenerRequestBody, options)(axios, basePath);
        },
    };
};
/**
 * ListenerApi - object-oriented interface
 * @export
 * @class ListenerApi
 * @extends {BaseAPI}
 */
export class ListenerApi extends BaseAPI {
    /**
     *
     * @summary Create a new Listener
     * @param {ListenerRequestBody} listenerRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    addListener(listenerRequestBody, options) {
        return ListenerApiFp(this.configuration).addListener(listenerRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Associates a Template to a Listener
     * @param {string} listenerId Listener id to disassociate
     * @param {string} templateId Template id to associate with the Listener
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    addListenerTemplate(listenerId, templateId, options) {
        return ListenerApiFp(this.configuration).addListenerTemplate(listenerId, templateId, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Deletes a Listener
     * @param {string} listenerId ID of listener to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    deleteListener(listenerId, options) {
        return ListenerApiFp(this.configuration).deleteListener(listenerId, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Disassociates a Template from a Listener
     * @param {string} listenerId Listener id to disassociate
     * @param {string} templateId Template id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    deleteListenerTemplate(listenerId, templateId, options) {
        return ListenerApiFp(this.configuration).deleteListenerTemplate(listenerId, templateId, options)(this.axios, this.basePath);
    }
    /**
     * Returns a listener
     * @summary Get a listener by ID
     * @param {string} listenerId ID of listener to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    getListener(listenerId, options) {
        return ListenerApiFp(this.configuration).getListener(listenerId, options)(this.axios, this.basePath);
    }
    /**
     * Returns a list of templates associated with this listener
     * @summary List Templates for Listener
     * @param {string} listenerId ID of listener
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    listListenerTemplates(listenerId, options) {
        return ListenerApiFp(this.configuration).listListenerTemplates(listenerId, options)(this.axios, this.basePath);
    }
    /**
     * Returns a list of Listeners
     * @summary List all Listeners
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    listListeners(options) {
        return ListenerApiFp(this.configuration).listListeners(options)(this.axios, this.basePath);
    }
    /**
     * Returns a list of messages for the given ListenerAction
     * @summary List all messages
     * @param {string} listenerActionId The id of the ListenerAction to limit the results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    listMessagesForAction(listenerActionId, options) {
        return ListenerApiFp(this.configuration).listMessagesForAction(listenerActionId, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Updates a Listener
     * @param {string} listenerId ID of listener to update
     * @param {ListenerRequestBody} listenerRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApi
     */
    updateListener(listenerId, listenerRequestBody, options) {
        return ListenerApiFp(this.configuration).updateListener(listenerId, listenerRequestBody, options)(this.axios, this.basePath);
    }
}
/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {string} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById(messageId, options = {}) {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId', 'Required parameter messageId was null or undefined when calling getMessageById.');
            }
            const localVarPath = `/messages/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of messages
         * @summary List all messages
         * @param {Date} [startDate]
         * @param {Date} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessages(startDate, endDate, options = {}) {
            const localVarPath = `/messages`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate.toISOString();
            }
            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate.toISOString();
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function (configuration) {
    return {
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {string} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById(messageId, options) {
            const localVarAxiosArgs = MessageApiAxiosParamCreator(configuration).getMessageById(messageId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of messages
         * @summary List all messages
         * @param {Date} [startDate]
         * @param {Date} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessages(startDate, endDate, options) {
            const localVarAxiosArgs = MessageApiAxiosParamCreator(configuration).listMessages(startDate, endDate, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {string} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById(messageId, options) {
            return MessageApiFp(configuration).getMessageById(messageId, options)(axios, basePath);
        },
        /**
         * Returns a list of messages
         * @summary List all messages
         * @param {Date} [startDate]
         * @param {Date} [endDate]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessages(startDate, endDate, options) {
            return MessageApiFp(configuration).listMessages(startDate, endDate, options)(axios, basePath);
        },
    };
};
/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     * Returns a single message
     * @summary Find message by ID
     * @param {string} messageId ID of message to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    getMessageById(messageId, options) {
        return MessageApiFp(this.configuration).getMessageById(messageId, options)(this.axios, this.basePath);
    }
    /**
     * Returns a list of messages
     * @summary List all messages
     * @param {Date} [startDate]
     * @param {Date} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    listMessages(startDate, endDate, options) {
        return MessageApiFp(this.configuration).listMessages(startDate, endDate, options)(this.axios, this.basePath);
    }
}
/**
 * OrganizationApi - axios parameter creator
 * @export
 */
export const OrganizationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Get organization info for the currently authenticated context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationInfo(options = {}) {
            const localVarPath = `/organization`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * OrganizationApi - functional programming interface
 * @export
 */
export const OrganizationApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Get organization info for the currently authenticated context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationInfo(options) {
            const localVarAxiosArgs = OrganizationApiAxiosParamCreator(configuration).getOrganizationInfo(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * OrganizationApi - factory interface
 * @export
 */
export const OrganizationApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Get organization info for the currently authenticated context
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationInfo(options) {
            return OrganizationApiFp(configuration).getOrganizationInfo(options)(axios, basePath);
        },
    };
};
/**
 * OrganizationApi - object-oriented interface
 * @export
 * @class OrganizationApi
 * @extends {BaseAPI}
 */
export class OrganizationApi extends BaseAPI {
    /**
     *
     * @summary Get organization info for the currently authenticated context
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationApi
     */
    getOrganizationInfo(options) {
        return OrganizationApiFp(this.configuration).getOrganizationInfo(options)(this.axios, this.basePath);
    }
}
/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Template
         * @param {TemplateRequestBody} templateRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate(templateRequestBody, options = {}) {
            // verify required parameter 'templateRequestBody' is not null or undefined
            if (templateRequestBody === null || templateRequestBody === undefined) {
                throw new RequiredError('templateRequestBody', 'Required parameter templateRequestBody was null or undefined when calling addTemplate.');
            }
            const localVarPath = `/templates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TemplateRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(templateRequestBody !== undefined ? templateRequestBody : {}) : (templateRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a Template
         * @param {string} templateId Template id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(templateId, options = {}) {
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId', 'Required parameter templateId was null or undefined when calling deleteTemplate.');
            }
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single template
         * @summary Find Template by ID
         * @param {string} templateId ID of template to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(templateId, options = {}) {
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId', 'Required parameter templateId was null or undefined when calling getTemplateById.');
            }
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of templates
         * @summary List all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplate(options = {}) {
            const localVarPath = `/templates`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a string representing the HTML content of an email to be sent
         * @summary Renders a template using the provided event parameters
         * @param {string} templateId ID of template to return
         * @param {RenderTemplateRequestBody} renderTemplateRequestBody The event parameters used to render
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderTemplate(templateId, renderTemplateRequestBody, options = {}) {
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId', 'Required parameter templateId was null or undefined when calling renderTemplate.');
            }
            // verify required parameter 'renderTemplateRequestBody' is not null or undefined
            if (renderTemplateRequestBody === null || renderTemplateRequestBody === undefined) {
                throw new RequiredError('renderTemplateRequestBody', 'Required parameter renderTemplateRequestBody was null or undefined when calling renderTemplate.');
            }
            const localVarPath = `/templates/{templateId}/render`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("RenderTemplateRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(renderTemplateRequestBody !== undefined ? renderTemplateRequestBody : {}) : (renderTemplateRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing Template
         * @param {string} templateId ID of template to return
         * @param {TemplateRequestBody} templateRequestBody successful operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(templateId, templateRequestBody, options = {}) {
            // verify required parameter 'templateId' is not null or undefined
            if (templateId === null || templateId === undefined) {
                throw new RequiredError('templateId', 'Required parameter templateId was null or undefined when calling updateTemplate.');
            }
            // verify required parameter 'templateRequestBody' is not null or undefined
            if (templateRequestBody === null || templateRequestBody === undefined) {
                throw new RequiredError('templateRequestBody', 'Required parameter templateRequestBody was null or undefined when calling updateTemplate.');
            }
            const localVarPath = `/templates/{templateId}`
                .replace(`{${"templateId"}}`, encodeURIComponent(String(templateId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("TemplateRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(templateRequestBody !== undefined ? templateRequestBody : {}) : (templateRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function (configuration) {
    return {
        /**
         *
         * @summary Create a new Template
         * @param {TemplateRequestBody} templateRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate(templateRequestBody, options) {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).addTemplate(templateRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Deletes a Template
         * @param {string} templateId Template id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(templateId, options) {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).deleteTemplate(templateId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a single template
         * @summary Find Template by ID
         * @param {string} templateId ID of template to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(templateId, options) {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).getTemplateById(templateId, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of templates
         * @summary List all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplate(options) {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).listTemplate(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a string representing the HTML content of an email to be sent
         * @summary Renders a template using the provided event parameters
         * @param {string} templateId ID of template to return
         * @param {RenderTemplateRequestBody} renderTemplateRequestBody The event parameters used to render
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderTemplate(templateId, renderTemplateRequestBody, options) {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).renderTemplate(templateId, renderTemplateRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Update an existing Template
         * @param {string} templateId ID of template to return
         * @param {TemplateRequestBody} templateRequestBody successful operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(templateId, templateRequestBody, options) {
            const localVarAxiosArgs = TemplateApiAxiosParamCreator(configuration).updateTemplate(templateId, templateRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @summary Create a new Template
         * @param {TemplateRequestBody} templateRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTemplate(templateRequestBody, options) {
            return TemplateApiFp(configuration).addTemplate(templateRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Deletes a Template
         * @param {string} templateId Template id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(templateId, options) {
            return TemplateApiFp(configuration).deleteTemplate(templateId, options)(axios, basePath);
        },
        /**
         * Returns a single template
         * @summary Find Template by ID
         * @param {string} templateId ID of template to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplateById(templateId, options) {
            return TemplateApiFp(configuration).getTemplateById(templateId, options)(axios, basePath);
        },
        /**
         * Returns a list of templates
         * @summary List all Templates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTemplate(options) {
            return TemplateApiFp(configuration).listTemplate(options)(axios, basePath);
        },
        /**
         * Returns a string representing the HTML content of an email to be sent
         * @summary Renders a template using the provided event parameters
         * @param {string} templateId ID of template to return
         * @param {RenderTemplateRequestBody} renderTemplateRequestBody The event parameters used to render
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        renderTemplate(templateId, renderTemplateRequestBody, options) {
            return TemplateApiFp(configuration).renderTemplate(templateId, renderTemplateRequestBody, options)(axios, basePath);
        },
        /**
         *
         * @summary Update an existing Template
         * @param {string} templateId ID of template to return
         * @param {TemplateRequestBody} templateRequestBody successful operation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTemplate(templateId, templateRequestBody, options) {
            return TemplateApiFp(configuration).updateTemplate(templateId, templateRequestBody, options)(axios, basePath);
        },
    };
};
/**
 * TemplateApi - object-oriented interface
 * @export
 * @class TemplateApi
 * @extends {BaseAPI}
 */
export class TemplateApi extends BaseAPI {
    /**
     *
     * @summary Create a new Template
     * @param {TemplateRequestBody} templateRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    addTemplate(templateRequestBody, options) {
        return TemplateApiFp(this.configuration).addTemplate(templateRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Deletes a Template
     * @param {string} templateId Template id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    deleteTemplate(templateId, options) {
        return TemplateApiFp(this.configuration).deleteTemplate(templateId, options)(this.axios, this.basePath);
    }
    /**
     * Returns a single template
     * @summary Find Template by ID
     * @param {string} templateId ID of template to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    getTemplateById(templateId, options) {
        return TemplateApiFp(this.configuration).getTemplateById(templateId, options)(this.axios, this.basePath);
    }
    /**
     * Returns a list of templates
     * @summary List all Templates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    listTemplate(options) {
        return TemplateApiFp(this.configuration).listTemplate(options)(this.axios, this.basePath);
    }
    /**
     * Returns a string representing the HTML content of an email to be sent
     * @summary Renders a template using the provided event parameters
     * @param {string} templateId ID of template to return
     * @param {RenderTemplateRequestBody} renderTemplateRequestBody The event parameters used to render
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    renderTemplate(templateId, renderTemplateRequestBody, options) {
        return TemplateApiFp(this.configuration).renderTemplate(templateId, renderTemplateRequestBody, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Update an existing Template
     * @param {string} templateId ID of template to return
     * @param {TemplateRequestBody} templateRequestBody successful operation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApi
     */
    updateTemplate(templateId, templateRequestBody, options) {
        return TemplateApiFp(this.configuration).updateTemplate(templateId, templateRequestBody, options)(this.axios, this.basePath);
    }
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options = {}) {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get user info for the currently authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options = {}) {
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Google required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken("Google", ["https://www.googleapis.com/auth/userinfo.email"])
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username, password, options = {}) {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username', 'Required parameter username was null or undefined when calling loginUser.');
            }
            // verify required parameter 'password' is not null or undefined
            if (password === null || password === undefined) {
                throw new RequiredError('password', 'Required parameter password was null or undefined when calling loginUser.');
            }
            const localVarPath = `/user/login`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options = {}) {
            const localVarPath = `/user/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {UserRequestBody} userRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userRequestBody, options = {}) {
            // verify required parameter 'userRequestBody' is not null or undefined
            if (userRequestBody === null || userRequestBody === undefined) {
                throw new RequiredError('userRequestBody', 'Required parameter userRequestBody was null or undefined when calling updateUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, baseOptions, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = ("UserRequestBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(userRequestBody !== undefined ? userRequestBody : {}) : (userRequestBody || "");
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options) {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).deleteUser(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Get user info for the currently authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options) {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).getUserInfo(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username, password, options) {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).loginUser(username, password, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options) {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).logoutUser(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {UserRequestBody} userRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userRequestBody, options) {
            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).updateUser(userRequestBody, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = Object.assign({}, localVarAxiosArgs.options, { url: basePath + localVarAxiosArgs.url });
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * This can only be done by the logged in user.
         * @summary Delete user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(options) {
            return UserApiFp(configuration).deleteUser(options)(axios, basePath);
        },
        /**
         *
         * @summary Get user info for the currently authenticated user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfo(options) {
            return UserApiFp(configuration).getUserInfo(options)(axios, basePath);
        },
        /**
         *
         * @summary Logs user into the system
         * @param {string} username The user name for login
         * @param {string} password The password for login in clear text
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(username, password, options) {
            return UserApiFp(configuration).loginUser(username, password, options)(axios, basePath);
        },
        /**
         *
         * @summary Logs out current logged in user session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutUser(options) {
            return UserApiFp(configuration).logoutUser(options)(axios, basePath);
        },
        /**
         * This can only be done by the logged in user.
         * @summary Updated user
         * @param {UserRequestBody} userRequestBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(userRequestBody, options) {
            return UserApiFp(configuration).updateUser(userRequestBody, options)(axios, basePath);
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * This can only be done by the logged in user.
     * @summary Delete user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    deleteUser(options) {
        return UserApiFp(this.configuration).deleteUser(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Get user info for the currently authenticated user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserInfo(options) {
        return UserApiFp(this.configuration).getUserInfo(options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Logs user into the system
     * @param {string} username The user name for login
     * @param {string} password The password for login in clear text
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    loginUser(username, password, options) {
        return UserApiFp(this.configuration).loginUser(username, password, options)(this.axios, this.basePath);
    }
    /**
     *
     * @summary Logs out current logged in user session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    logoutUser(options) {
        return UserApiFp(this.configuration).logoutUser(options)(this.axios, this.basePath);
    }
    /**
     * This can only be done by the logged in user.
     * @summary Updated user
     * @param {UserRequestBody} userRequestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateUser(userRequestBody, options) {
        return UserApiFp(this.configuration).updateUser(userRequestBody, options)(this.axios, this.basePath);
    }
}
